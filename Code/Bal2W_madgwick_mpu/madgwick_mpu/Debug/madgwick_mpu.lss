
madgwick_mpu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000016ee  00001782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  008000aa  008000aa  000017cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000227b  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  00003c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001393  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00005738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000649  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020a7  00000000  00000000  00006299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00008340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <Read_RawValue+0x23e>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ee ee       	ldi	r30, 0xEE	; 238
      ea:	f6 e1       	ldi	r31, 0x16	; 22
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	aa 3a       	cpi	r26, 0xAA	; 170
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	aa ea       	ldi	r26, 0xAA	; 170
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a0 30       	cpi	r26, 0x00	; 0
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <main>
     10c:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <I2C_Repeated_Start>:
}

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     114:	94 ea       	ldi	r25, 0xA4	; 164
     116:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     118:	06 b6       	in	r0, 0x36	; 54
     11a:	07 fe       	sbrs	r0, 7
     11c:	fd cf       	rjmp	.-6      	; 0x118 <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     11e:	91 b1       	in	r25, 0x01	; 1
     120:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     122:	90 31       	cpi	r25, 0x10	; 16
     124:	71 f4       	brne	.+28     	; 0x142 <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     126:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     128:	84 e8       	ldi	r24, 0x84	; 132
     12a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     12c:	06 b6       	in	r0, 0x36	; 54
     12e:	07 fe       	sbrs	r0, 7
     130:	fd cf       	rjmp	.-6      	; 0x12c <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     132:	81 b1       	in	r24, 0x01	; 1
     134:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     136:	80 34       	cpi	r24, 0x40	; 64
     138:	31 f0       	breq	.+12     	; 0x146 <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     13a:	80 32       	cpi	r24, 0x20	; 32
     13c:	31 f0       	breq	.+12     	; 0x14a <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     13e:	83 e0       	ldi	r24, 0x03	; 3
     140:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     14a:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     14c:	08 95       	ret

0000014e <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     14e:	84 e9       	ldi	r24, 0x94	; 148
     150:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     152:	06 b6       	in	r0, 0x36	; 54
     154:	04 fc       	sbrc	r0, 4
     156:	fd cf       	rjmp	.-6      	; 0x152 <I2C_Stop+0x4>
}
     158:	08 95       	ret

0000015a <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	18 2f       	mov	r17, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     162:	c4 ea       	ldi	r28, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     164:	d4 e8       	ldi	r29, 0x84	; 132
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     166:	c6 bf       	out	0x36, r28	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     168:	06 b6       	in	r0, 0x36	; 54
     16a:	07 fe       	sbrs	r0, 7
     16c:	fd cf       	rjmp	.-6      	; 0x168 <I2C_Start_Wait+0xe>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     16e:	91 b1       	in	r25, 0x01	; 1
     170:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     172:	98 30       	cpi	r25, 0x08	; 8
     174:	c1 f7       	brne	.-16     	; 0x166 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     176:	13 b9       	out	0x03, r17	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     178:	d6 bf       	out	0x36, r29	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     17a:	06 b6       	in	r0, 0x36	; 54
     17c:	07 fe       	sbrs	r0, 7
     17e:	fd cf       	rjmp	.-6      	; 0x17a <I2C_Start_Wait+0x20>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     180:	91 b1       	in	r25, 0x01	; 1
     182:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     184:	98 31       	cpi	r25, 0x18	; 24
     186:	19 f0       	breq	.+6      	; 0x18e <I2C_Start_Wait+0x34>
		{
			I2C_Stop();										/* If not then generate stop condition */
     188:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>
			continue;										/* continue with start loop again */
     18c:	ec cf       	rjmp	.-40     	; 0x166 <I2C_Start_Wait+0xc>
		}
		break;												/* If yes then break loop */
	}
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	08 95       	ret

00000196 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     196:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     198:	84 e8       	ldi	r24, 0x84	; 132
     19a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     19c:	06 b6       	in	r0, 0x36	; 54
     19e:	07 fe       	sbrs	r0, 7
     1a0:	fd cf       	rjmp	.-6      	; 0x19c <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1a2:	81 b1       	in	r24, 0x01	; 1
     1a4:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     1a6:	88 32       	cpi	r24, 0x28	; 40
     1a8:	21 f0       	breq	.+8      	; 0x1b2 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     1aa:	80 33       	cpi	r24, 0x30	; 48
     1ac:	21 f0       	breq	.+8      	; 0x1b6 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     1b6:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     1b8:	08 95       	ret

000001ba <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     1ba:	84 ec       	ldi	r24, 0xC4	; 196
     1bc:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     1be:	06 b6       	in	r0, 0x36	; 54
     1c0:	07 fe       	sbrs	r0, 7
     1c2:	fd cf       	rjmp	.-6      	; 0x1be <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     1c4:	83 b1       	in	r24, 0x03	; 3
}	
     1c6:	08 95       	ret

000001c8 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     1cc:	06 b6       	in	r0, 0x36	; 54
     1ce:	07 fe       	sbrs	r0, 7
     1d0:	fd cf       	rjmp	.-6      	; 0x1cc <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     1d2:	83 b1       	in	r24, 0x03	; 3
}	
     1d4:	08 95       	ret

000001d6 <pulse>:
			sprintf(buff_buffer,"%%%03uu",bits);
			sprintf(buffer,buff_buffer,reg);
			break;
	}
	lcd_string(buffer);
}
     1d6:	c2 9a       	sbi	0x18, 2	; 24
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	8a 95       	dec	r24
     1dc:	f1 f7       	brne	.-4      	; 0x1da <pulse+0x4>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <pulse+0xa>
     1e0:	c2 98       	cbi	0x18, 2	; 24
     1e2:	85 e8       	ldi	r24, 0x85	; 133
     1e4:	8a 95       	dec	r24
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <pulse+0xe>
     1e8:	00 00       	nop
     1ea:	08 95       	ret

000001ec <lcd_write>:
     1ec:	cf 93       	push	r28
     1ee:	c8 2f       	mov	r28, r24
     1f0:	88 23       	and	r24, r24
     1f2:	14 f4       	brge	.+4      	; 0x1f8 <lcd_write+0xc>
     1f4:	c0 9a       	sbi	0x18, 0	; 24
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <lcd_write+0xe>
     1f8:	c0 98       	cbi	0x18, 0	; 24
     1fa:	c6 ff       	sbrs	r28, 6
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <lcd_write+0x16>
     1fe:	96 9a       	sbi	0x12, 6	; 18
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_write+0x18>
     202:	96 98       	cbi	0x12, 6	; 18
     204:	c5 ff       	sbrs	r28, 5
     206:	02 c0       	rjmp	.+4      	; 0x20c <lcd_write+0x20>
     208:	c4 9a       	sbi	0x18, 4	; 24
     20a:	01 c0       	rjmp	.+2      	; 0x20e <lcd_write+0x22>
     20c:	c4 98       	cbi	0x18, 4	; 24
     20e:	c4 ff       	sbrs	r28, 4
     210:	02 c0       	rjmp	.+4      	; 0x216 <lcd_write+0x2a>
     212:	c3 9a       	sbi	0x18, 3	; 24
     214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_write+0x2c>
     216:	c3 98       	cbi	0x18, 3	; 24
     218:	c1 9a       	sbi	0x18, 1	; 24
     21a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <pulse>
     21e:	c3 ff       	sbrs	r28, 3
     220:	02 c0       	rjmp	.+4      	; 0x226 <lcd_write+0x3a>
     222:	c0 9a       	sbi	0x18, 0	; 24
     224:	01 c0       	rjmp	.+2      	; 0x228 <lcd_write+0x3c>
     226:	c0 98       	cbi	0x18, 0	; 24
     228:	c2 ff       	sbrs	r28, 2
     22a:	02 c0       	rjmp	.+4      	; 0x230 <lcd_write+0x44>
     22c:	96 9a       	sbi	0x12, 6	; 18
     22e:	01 c0       	rjmp	.+2      	; 0x232 <lcd_write+0x46>
     230:	96 98       	cbi	0x12, 6	; 18
     232:	c1 ff       	sbrs	r28, 1
     234:	02 c0       	rjmp	.+4      	; 0x23a <lcd_write+0x4e>
     236:	c4 9a       	sbi	0x18, 4	; 24
     238:	01 c0       	rjmp	.+2      	; 0x23c <lcd_write+0x50>
     23a:	c4 98       	cbi	0x18, 4	; 24
     23c:	c0 ff       	sbrs	r28, 0
     23e:	02 c0       	rjmp	.+4      	; 0x244 <lcd_write+0x58>
     240:	c3 9a       	sbi	0x18, 3	; 24
     242:	01 c0       	rjmp	.+2      	; 0x246 <lcd_write+0x5a>
     244:	c3 98       	cbi	0x18, 3	; 24
     246:	c1 9a       	sbi	0x18, 1	; 24
     248:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <pulse>
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <lcd_cmd>:
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
     254:	88 23       	and	r24, r24
     256:	14 f4       	brge	.+4      	; 0x25c <lcd_cmd+0xc>
     258:	c0 9a       	sbi	0x18, 0	; 24
     25a:	01 c0       	rjmp	.+2      	; 0x25e <lcd_cmd+0xe>
     25c:	c0 98       	cbi	0x18, 0	; 24
     25e:	c6 ff       	sbrs	r28, 6
     260:	02 c0       	rjmp	.+4      	; 0x266 <lcd_cmd+0x16>
     262:	96 9a       	sbi	0x12, 6	; 18
     264:	01 c0       	rjmp	.+2      	; 0x268 <lcd_cmd+0x18>
     266:	96 98       	cbi	0x12, 6	; 18
     268:	c5 ff       	sbrs	r28, 5
     26a:	02 c0       	rjmp	.+4      	; 0x270 <lcd_cmd+0x20>
     26c:	c4 9a       	sbi	0x18, 4	; 24
     26e:	01 c0       	rjmp	.+2      	; 0x272 <lcd_cmd+0x22>
     270:	c4 98       	cbi	0x18, 4	; 24
     272:	c4 ff       	sbrs	r28, 4
     274:	02 c0       	rjmp	.+4      	; 0x27a <lcd_cmd+0x2a>
     276:	c3 9a       	sbi	0x18, 3	; 24
     278:	01 c0       	rjmp	.+2      	; 0x27c <lcd_cmd+0x2c>
     27a:	c3 98       	cbi	0x18, 3	; 24
     27c:	c1 98       	cbi	0x18, 1	; 24
     27e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <pulse>
     282:	c3 ff       	sbrs	r28, 3
     284:	02 c0       	rjmp	.+4      	; 0x28a <lcd_cmd+0x3a>
     286:	c0 9a       	sbi	0x18, 0	; 24
     288:	01 c0       	rjmp	.+2      	; 0x28c <lcd_cmd+0x3c>
     28a:	c0 98       	cbi	0x18, 0	; 24
     28c:	c2 ff       	sbrs	r28, 2
     28e:	02 c0       	rjmp	.+4      	; 0x294 <lcd_cmd+0x44>
     290:	96 9a       	sbi	0x12, 6	; 18
     292:	01 c0       	rjmp	.+2      	; 0x296 <lcd_cmd+0x46>
     294:	96 98       	cbi	0x12, 6	; 18
     296:	c1 ff       	sbrs	r28, 1
     298:	02 c0       	rjmp	.+4      	; 0x29e <lcd_cmd+0x4e>
     29a:	c4 9a       	sbi	0x18, 4	; 24
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <lcd_cmd+0x50>
     29e:	c4 98       	cbi	0x18, 4	; 24
     2a0:	c0 ff       	sbrs	r28, 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <lcd_cmd+0x58>
     2a4:	c3 9a       	sbi	0x18, 3	; 24
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <lcd_cmd+0x5a>
     2a8:	c3 98       	cbi	0x18, 3	; 24
     2aa:	c1 98       	cbi	0x18, 1	; 24
     2ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <pulse>
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <lcd_home>:
     2b4:	80 e8       	ldi	r24, 0x80	; 128
     2b6:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     2ba:	8f e6       	ldi	r24, 0x6F	; 111
     2bc:	97 e1       	ldi	r25, 0x17	; 23
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_home+0xa>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_home+0x10>
     2c4:	00 00       	nop
     2c6:	08 95       	ret

000002c8 <lcd_clear>:
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     2ce:	8f e6       	ldi	r24, 0x6F	; 111
     2d0:	97 e1       	ldi	r25, 0x17	; 23
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_clear+0xa>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <lcd_clear+0x10>
     2d8:	00 00       	nop
     2da:	08 95       	ret

000002dc <lcd_gotoxy>:
     2dc:	82 30       	cpi	r24, 0x02	; 2
     2de:	71 f0       	breq	.+28     	; 0x2fc <lcd_gotoxy+0x20>
     2e0:	18 f4       	brcc	.+6      	; 0x2e8 <lcd_gotoxy+0xc>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <lcd_gotoxy+0x16>
     2e6:	19 c0       	rjmp	.+50     	; 0x31a <lcd_gotoxy+0x3e>
     2e8:	83 30       	cpi	r24, 0x03	; 3
     2ea:	69 f0       	breq	.+26     	; 0x306 <lcd_gotoxy+0x2a>
     2ec:	84 30       	cpi	r24, 0x04	; 4
     2ee:	81 f0       	breq	.+32     	; 0x310 <lcd_gotoxy+0x34>
     2f0:	14 c0       	rjmp	.+40     	; 0x31a <lcd_gotoxy+0x3e>
     2f2:	8f e7       	ldi	r24, 0x7F	; 127
     2f4:	86 0f       	add	r24, r22
     2f6:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     2fa:	08 95       	ret
     2fc:	8f eb       	ldi	r24, 0xBF	; 191
     2fe:	86 0f       	add	r24, r22
     300:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     304:	08 95       	ret
     306:	8f e8       	ldi	r24, 0x8F	; 143
     308:	86 0f       	add	r24, r22
     30a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     30e:	08 95       	ret
     310:	8f ec       	ldi	r24, 0xCF	; 207
     312:	86 0f       	add	r24, r22
     314:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     318:	08 95       	ret
     31a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_home>
     31e:	08 95       	ret

00000320 <lcd_string>:
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	ec 01       	movw	r28, r24
     326:	88 81       	ld	r24, Y
     328:	88 23       	and	r24, r24
     32a:	31 f0       	breq	.+12     	; 0x338 <lcd_string+0x18>
     32c:	21 96       	adiw	r28, 0x01	; 1
     32e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_write>
     332:	89 91       	ld	r24, Y+
     334:	81 11       	cpse	r24, r1
     336:	fb cf       	rjmp	.-10     	; 0x32e <lcd_string+0xe>
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <lcd_float_print>:
     33e:	7f 92       	push	r7
     340:	8f 92       	push	r8
     342:	9f 92       	push	r9
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	67 97       	sbiw	r28, 0x17	; 23
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	4b 01       	movw	r8, r22
     36a:	5c 01       	movw	r10, r24
     36c:	14 2f       	mov	r17, r20
     36e:	f2 2e       	mov	r15, r18
     370:	0e 94 e7 05 	call	0xbce	; 0xbce <__fixsfsi>
     374:	d6 2e       	mov	r13, r22
     376:	c7 2e       	mov	r12, r23
     378:	e8 2e       	mov	r14, r24
     37a:	79 2e       	mov	r7, r25
     37c:	6f 2d       	mov	r22, r15
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__floatunsisf>
     388:	9b 01       	movw	r18, r22
     38a:	ac 01       	movw	r20, r24
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	91 e4       	ldi	r25, 0x41	; 65
     394:	0e 94 47 07 	call	0xe8e	; 0xe8e <pow>
     398:	6c 8b       	std	Y+20, r22	; 0x14
     39a:	7d 8b       	std	Y+21, r23	; 0x15
     39c:	8e 8b       	std	Y+22, r24	; 0x16
     39e:	9f 8b       	std	Y+23, r25	; 0x17
     3a0:	6d 2d       	mov	r22, r13
     3a2:	7c 2d       	mov	r23, r12
     3a4:	8e 2d       	mov	r24, r14
     3a6:	97 2d       	mov	r25, r7
     3a8:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	c5 01       	movw	r24, r10
     3b2:	b4 01       	movw	r22, r8
     3b4:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	6c 89       	ldd	r22, Y+20	; 0x14
     3be:	7d 89       	ldd	r23, Y+21	; 0x15
     3c0:	8e 89       	ldd	r24, Y+22	; 0x16
     3c2:	9f 89       	ldd	r25, Y+23	; 0x17
     3c4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     3c8:	0e 94 e7 05 	call	0xbce	; 0xbce <__fixsfsi>
     3cc:	4b 01       	movw	r8, r22
     3ce:	5c 01       	movw	r10, r24
     3d0:	1f 92       	push	r1
     3d2:	1f 93       	push	r17
     3d4:	8b e6       	ldi	r24, 0x6B	; 107
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	8e 01       	movw	r16, r28
     3de:	03 5f       	subi	r16, 0xF3	; 243
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	1f 93       	push	r17
     3e4:	0f 93       	push	r16
     3e6:	0e 94 9d 08 	call	0x113a	; 0x113a <sprintf>
     3ea:	7f 92       	push	r7
     3ec:	ef 92       	push	r14
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	1f 93       	push	r17
     3f4:	0f 93       	push	r16
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	6c 01       	movw	r12, r24
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	0e 94 9d 08 	call	0x113a	; 0x113a <sprintf>
     404:	c6 01       	movw	r24, r12
     406:	0e 94 90 01 	call	0x320	; 0x320 <lcd_string>
     40a:	8e e2       	ldi	r24, 0x2E	; 46
     40c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_write>
     410:	1f 92       	push	r1
     412:	ff 92       	push	r15
     414:	83 e7       	ldi	r24, 0x73	; 115
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	1f 93       	push	r17
     41e:	0f 93       	push	r16
     420:	0e 94 9d 08 	call	0x113a	; 0x113a <sprintf>
     424:	d5 01       	movw	r26, r10
     426:	c4 01       	movw	r24, r8
     428:	bb 20       	and	r11, r11
     42a:	3c f4       	brge	.+14     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     42c:	88 27       	eor	r24, r24
     42e:	99 27       	eor	r25, r25
     430:	dc 01       	movw	r26, r24
     432:	88 19       	sub	r24, r8
     434:	99 09       	sbc	r25, r9
     436:	aa 09       	sbc	r26, r10
     438:	bb 09       	sbc	r27, r11
     43a:	bf 93       	push	r27
     43c:	af 93       	push	r26
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	ce 01       	movw	r24, r28
     444:	0d 96       	adiw	r24, 0x0d	; 13
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	8e 01       	movw	r16, r28
     44c:	0f 5f       	subi	r16, 0xFF	; 255
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
     450:	1f 93       	push	r17
     452:	0f 93       	push	r16
     454:	0e 94 9d 08 	call	0x113a	; 0x113a <sprintf>
     458:	c8 01       	movw	r24, r16
     45a:	0e 94 90 01 	call	0x320	; 0x320 <lcd_string>
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	67 96       	adiw	r28, 0x17	; 23
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	bf 90       	pop	r11
     486:	af 90       	pop	r10
     488:	9f 90       	pop	r9
     48a:	8f 90       	pop	r8
     48c:	7f 90       	pop	r7
     48e:	08 95       	ret

00000490 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     490:	2f e7       	ldi	r18, 0x7F	; 127
     492:	88 e3       	ldi	r24, 0x38	; 56
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	21 50       	subi	r18, 0x01	; 1
     498:	80 40       	sbci	r24, 0x00	; 0
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <lcd_set_4bit+0x6>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <lcd_set_4bit+0x10>
     4a0:	00 00       	nop
void lcd_set_4bit(void)
{
	uint8_t data;
	_delay_ms(50);

	cbit(PORT(RS_PORT),RS_BIT);				//RS=0 --- Command Input
     4a2:	c1 98       	cbi	0x18, 1	; 24
	//cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	data = 0x30;				//Sending 3 in the upper nibble

	COPY(data,7,PORT(D7_PORT),D7_BIT);
     4a4:	c0 98       	cbi	0x18, 0	; 24
	COPY(data,6,PORT(D6_PORT),D6_BIT);
     4a6:	96 98       	cbi	0x12, 6	; 18
	COPY(data,5,PORT(D5_PORT),D5_BIT);
     4a8:	c4 9a       	sbi	0x18, 4	; 24
	COPY(data,4,PORT(D4_PORT),D4_BIT);
     4aa:	c3 9a       	sbi	0x18, 3	; 24

	sbit(PORT(EN_PORT),EN_BIT);				//Set Enable Pin
     4ac:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ae:	22 e0       	ldi	r18, 0x02	; 2
     4b0:	2a 95       	dec	r18
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcd_set_4bit+0x20>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <lcd_set_4bit+0x26>
	_delay_us(1);					//delay
	cbit(PORT(EN_PORT),EN_BIT);				//Clear Enable Pin
     4b6:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b8:	8f e0       	ldi	r24, 0x0F	; 15
     4ba:	97 e2       	ldi	r25, 0x27	; 39
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <lcd_set_4bit+0x2c>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <lcd_set_4bit+0x32>
     4c2:	00 00       	nop

	_delay_ms(5);

	cbit(PORT(RS_PORT),RS_BIT);				//RS=0 --- Command Input
     4c4:	c1 98       	cbi	0x18, 1	; 24
	//cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	data = 0x30;				//Sending 3 in the upper nibble

	COPY(data,7,PORT(D7_PORT),D7_BIT);
     4c6:	c0 98       	cbi	0x18, 0	; 24
	COPY(data,6,PORT(D6_PORT),D6_BIT);
     4c8:	96 98       	cbi	0x12, 6	; 18
	COPY(data,5,PORT(D5_PORT),D5_BIT);
     4ca:	c4 9a       	sbi	0x18, 4	; 24
	COPY(data,4,PORT(D4_PORT),D4_BIT);
     4cc:	c3 9a       	sbi	0x18, 3	; 24

	sbit(PORT(EN_PORT),EN_BIT);				//Set Enable Pin
     4ce:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	9a 95       	dec	r25
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_set_4bit+0x42>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_set_4bit+0x48>
	_delay_us(1);					//delay
	cbit(PORT(EN_PORT),EN_BIT);				//Clear Enable Pin
     4d8:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4da:	8f e0       	ldi	r24, 0x0F	; 15
     4dc:	97 e2       	ldi	r25, 0x27	; 39
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_set_4bit+0x4e>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <lcd_set_4bit+0x54>
     4e4:	00 00       	nop

	_delay_ms(5);

	cbit(PORT(RS_PORT),RS_BIT);				//RS=0 --- Command Input
     4e6:	c1 98       	cbi	0x18, 1	; 24
	//cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	data = 0x30;				//Sending 3 in the upper nibble

	COPY(data,7,PORT(D7_PORT),D7_BIT);
     4e8:	c0 98       	cbi	0x18, 0	; 24
	COPY(data,6,PORT(D6_PORT),D6_BIT);
     4ea:	96 98       	cbi	0x12, 6	; 18
	COPY(data,5,PORT(D5_PORT),D5_BIT);
     4ec:	c4 9a       	sbi	0x18, 4	; 24
	COPY(data,4,PORT(D4_PORT),D4_BIT);
     4ee:	c3 9a       	sbi	0x18, 3	; 24

	sbit(PORT(EN_PORT),EN_BIT);				//Set Enable Pin
     4f0:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	9a 95       	dec	r25
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <lcd_set_4bit+0x64>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <lcd_set_4bit+0x6a>
	_delay_us(1);					//delay
	cbit(PORT(EN_PORT),EN_BIT);				//Clear Enable Pin
     4fa:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	8f e0       	ldi	r24, 0x0F	; 15
     4fe:	97 e2       	ldi	r25, 0x27	; 39
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <lcd_set_4bit+0x70>
     504:	00 c0       	rjmp	.+0      	; 0x506 <lcd_set_4bit+0x76>
     506:	00 00       	nop

	_delay_ms(5);

	cbit(PORT(RS_PORT),RS_BIT);				//RS=0 --- Command Input
     508:	c1 98       	cbi	0x18, 1	; 24
	//	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	data = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
	COPY(data,7,PORT(D7_PORT),D7_BIT);
     50a:	c0 98       	cbi	0x18, 0	; 24
	COPY(data,6,PORT(D6_PORT),D6_BIT);
     50c:	96 98       	cbi	0x12, 6	; 18
	COPY(data,5,PORT(D5_PORT),D5_BIT);
     50e:	c4 9a       	sbi	0x18, 4	; 24
	COPY(data,4,PORT(D4_PORT),D4_BIT);
     510:	c3 98       	cbi	0x18, 3	; 24

	sbit(PORT(EN_PORT),EN_BIT);				//Set Enable Pin
     512:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	9a 95       	dec	r25
     518:	f1 f7       	brne	.-4      	; 0x516 <lcd_set_4bit+0x86>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <lcd_set_4bit+0x8c>
	_delay_us(1);					//delay
	cbit(PORT(EN_PORT),EN_BIT);				//Clear Enable Pin
     51c:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     51e:	8f e0       	ldi	r24, 0x0F	; 15
     520:	97 e2       	ldi	r25, 0x27	; 39
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <lcd_set_4bit+0x92>
     526:	00 c0       	rjmp	.+0      	; 0x528 <lcd_set_4bit+0x98>
     528:	00 00       	nop
     52a:	08 95       	ret

0000052c <lcd_init>:
	sbit(DDR(LCD_PORT),EN_BIT);
	DDR(LCD_PORT) |= 0xF0;
	#endif

	#if (LCD_MODE == BITWISE)
	sbit(DDR(RS_PORT),RS_BIT);
     52c:	b9 9a       	sbi	0x17, 1	; 23
	sbit(DDR(EN_PORT),EN_BIT);
     52e:	ba 9a       	sbi	0x17, 2	; 23
	sbit(DDR(D4_PORT),D4_BIT);
     530:	bb 9a       	sbi	0x17, 3	; 23
	sbit(DDR(D5_PORT),D5_BIT);
     532:	bc 9a       	sbi	0x17, 4	; 23
	sbit(DDR(D6_PORT),D6_BIT);
     534:	8e 9a       	sbi	0x11, 6	; 17
	sbit(DDR(D7_PORT),D7_BIT);
     536:	b8 9a       	sbi	0x17, 0	; 23
	#endif

	lcd_set_4bit();
     538:	0e 94 48 02 	call	0x490	; 0x490 <lcd_set_4bit>

	lcd_cmd(0x28); //4-bit mode and 5x8 dot character font
     53c:	88 e2       	ldi	r24, 0x28	; 40
     53e:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     542:	8f e0       	ldi	r24, 0x0F	; 15
     544:	97 e2       	ldi	r25, 0x27	; 39
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <lcd_init+0x1a>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <lcd_init+0x20>
     54c:	00 00       	nop
	_delay_ms(5);
	//lcd_cmd(0x0F); //Turn on LCD and cursor + blinking
	lcd_cmd(0x0E);//Turn on LCD and cursor + no blinking
     54e:	8e e0       	ldi	r24, 0x0E	; 14
     550:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	97 e2       	ldi	r25, 0x27	; 39
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <lcd_init+0x2c>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <lcd_init+0x32>
     55e:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x01); //Clear LCD display
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     566:	8f e0       	ldi	r24, 0x0F	; 15
     568:	97 e2       	ldi	r25, 0x27	; 39
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_init+0x3e>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <lcd_init+0x44>
     570:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x06); //Auto increment cursor position
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     578:	8f e0       	ldi	r24, 0x0F	; 15
     57a:	97 e2       	ldi	r25, 0x27	; 39
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x50>
     580:	00 c0       	rjmp	.+0      	; 0x582 <lcd_init+0x56>
     582:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x80); //Set cursor position
     584:	80 e8       	ldi	r24, 0x80	; 128
     586:	0e 94 28 01 	call	0x250	; 0x250 <lcd_cmd>
     58a:	8f e0       	ldi	r24, 0x0F	; 15
     58c:	97 e2       	ldi	r25, 0x27	; 39
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <lcd_init+0x62>
     592:	00 c0       	rjmp	.+0      	; 0x594 <lcd_init+0x68>
     594:	00 00       	nop
     596:	08 95       	ret

00000598 <init>:

	// Input/Output Ports initialization
	// Port A initialization
	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
	// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
	PORTA=0x00;
     598:	1b ba       	out	0x1b, r1	; 27
	DDRA=0xFF;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	8a bb       	out	0x1a, r24	; 26

	// Port B initialization
	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
	// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
	PORTB=0x00;
     59e:	18 ba       	out	0x18, r1	; 24
	DDRB=0xFF;
     5a0:	87 bb       	out	0x17, r24	; 23

	// Port C initialization
	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
	// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
	PORTC=0x00;
     5a2:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
     5a4:	84 bb       	out	0x14, r24	; 20

	// Port D initialization
	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
	// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
	PORTD=0x00;
     5a6:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;
     5a8:	81 bb       	out	0x11, r24	; 17
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0 output: Disconnected
	TCCR0=0x00;
     5aa:	13 be       	out	0x33, r1	; 51
	TCNT0=0x00;
     5ac:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
     5ae:	1c be       	out	0x3c, r1	; 60
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0xA1;
     5b0:	81 ea       	ldi	r24, 0xA1	; 161
     5b2:	8f bd       	out	0x2f, r24	; 47
TCCR1B=0x0C;
     5b4:	8c e0       	ldi	r24, 0x0C	; 12
     5b6:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x00;
     5b8:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
     5ba:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
     5bc:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
     5be:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
     5c0:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
     5c2:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
     5c4:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
     5c6:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer2 Stopped
	// Mode: Normal top=0xFF
	// OC2 output: Disconnected
	ASSR=0x00;
     5c8:	12 bc       	out	0x22, r1	; 34
	TCCR2=0x00;
     5ca:	15 bc       	out	0x25, r1	; 37
	TCNT2=0x00;
     5cc:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
     5ce:	13 bc       	out	0x23, r1	; 35

	// External Interrupt(s) initialization
	// INT0: Off
	// INT1: Off
	// INT2: Off
	MCUCR=0x00;
     5d0:	15 be       	out	0x35, r1	; 53
	MCUCSR=0x00;
     5d2:	14 be       	out	0x34, r1	; 52

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=0x00;
     5d4:	19 be       	out	0x39, r1	; 57

	// USART initialization
	// USART disabled
	UCSRB=0x00;
     5d6:	1a b8       	out	0x0a, r1	; 10

	// Analog Comparator initialization
	// Analog Comparator: Off
	// Analog Comparator Input Capture by Timer/Counter 1: Off
	ACSR=0x80;
     5d8:	80 e8       	ldi	r24, 0x80	; 128
     5da:	88 b9       	out	0x08, r24	; 8
	SFIOR=0x00;
     5dc:	10 be       	out	0x30, r1	; 48

	// ADC initialization
	// ADC disabled
	ADCSRA=0x00;
     5de:	16 b8       	out	0x06, r1	; 6

	// SPI initialization
	// SPI disabled
	SPCR=0x00;
     5e0:	1d b8       	out	0x0d, r1	; 13

	// TWI initialization
	// TWI disabled
	TWCR=0x00;
     5e2:	16 be       	out	0x36, r1	; 54
     5e4:	08 95       	ret

000005e6 <main>:
#include "motor.h"

int main(void)
{

    init();
     5e6:	0e 94 cc 02 	call	0x598	; 0x598 <init>
	lcd_init();
     5ea:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_init>
	lcd_clear();
     5ee:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_clear>
	MPU6050_Init();
     5f2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <MPU6050_Init>
    /* Replace with your application code */
	 Gyro_off_calculation();              //run this to calculate offset
     5f6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Gyro_off_calculation>
  while(1);
     5fa:	ff cf       	rjmp	.-2      	; 0x5fa <main+0x14>

000005fc <MPU6050_Init>:
     5fc:	2f e7       	ldi	r18, 0x7F	; 127
     5fe:	89 ea       	ldi	r24, 0xA9	; 169
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	21 50       	subi	r18, 0x01	; 1
     604:	80 40       	sbci	r24, 0x00	; 0
     606:	90 40       	sbci	r25, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <MPU6050_Init+0x6>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <MPU6050_Init+0x10>
     60c:	00 00       	nop


void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     60e:	80 ed       	ldi	r24, 0xD0	; 208
     610:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     614:	89 e1       	ldi	r24, 0x19	; 25
     616:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     61a:	87 e0       	ldi	r24, 0x07	; 7
     61c:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Stop();
     620:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>

	I2C_Start_Wait(0xD0);
     624:	80 ed       	ldi	r24, 0xD0	; 208
     626:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     62a:	8b e6       	ldi	r24, 0x6B	; 107
     62c:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Stop();
     636:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>

	I2C_Start_Wait(0xD0);
     63a:	80 ed       	ldi	r24, 0xD0	; 208
     63c:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     640:	8a e1       	ldi	r24, 0x1A	; 26
     642:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Stop();
     64c:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>

	I2C_Start_Wait(0xD0);
     650:	80 ed       	ldi	r24, 0xD0	; 208
     652:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     656:	8b e1       	ldi	r24, 0x1B	; 27
     658:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Write(0x00);									/* Full scale range +/- 250 degree/C */
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Stop();
     662:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>

	I2C_Start_Wait(0xD0);
     666:	80 ed       	ldi	r24, 0xD0	; 208
     668:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     66c:	88 e3       	ldi	r24, 0x38	; 56
     66e:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Write(0x01);
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Stop();
     678:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>
     67c:	08 95       	ret

0000067e <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     67e:	80 ed       	ldi	r24, 0xD0	; 208
     680:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     684:	8b e3       	ldi	r24, 0x3B	; 59
     686:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     68a:	81 ed       	ldi	r24, 0xD1	; 209
     68c:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Repeated_Start>
     690:	08 95       	ret

00000692 <Read_RawValue>:
}


void Read_RawValue()
{
     692:	8f 92       	push	r8
     694:	9f 92       	push	r9
     696:	af 92       	push	r10
     698:	bf 92       	push	r11
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	cf 93       	push	r28
	MPU_Start_Loc();									/* Read Gyro values */
     6a4:	0e 94 3f 03 	call	0x67e	; 0x67e <MPU_Start_Loc>
	Acc_x_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     6a8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     6ac:	c8 2f       	mov	r28, r24
     6ae:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     6b2:	2c 2f       	mov	r18, r28
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	32 2f       	mov	r19, r18
     6b8:	22 27       	eor	r18, r18
     6ba:	28 2b       	or	r18, r24
     6bc:	30 93 b7 00 	sts	0x00B7, r19	; 0x8000b7 <Acc_x_raw+0x1>
     6c0:	20 93 b6 00 	sts	0x00B6, r18	; 0x8000b6 <Acc_x_raw>
	Acc_y_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     6c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     6c8:	c8 2f       	mov	r28, r24
     6ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     6ce:	2c 2f       	mov	r18, r28
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	32 2f       	mov	r19, r18
     6d4:	22 27       	eor	r18, r18
     6d6:	28 2b       	or	r18, r24
     6d8:	30 93 e3 00 	sts	0x00E3, r19	; 0x8000e3 <Acc_y_raw+0x1>
     6dc:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <Acc_y_raw>
	Acc_z_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     6e0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     6e4:	c8 2f       	mov	r28, r24
     6e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     6ea:	2c 2f       	mov	r18, r28
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	32 2f       	mov	r19, r18
     6f0:	22 27       	eor	r18, r18
     6f2:	28 2b       	or	r18, r24
     6f4:	30 93 b1 00 	sts	0x00B1, r19	; 0x8000b1 <Acc_z_raw+0x1>
     6f8:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <Acc_z_raw>
	Temperature_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     6fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     700:	c8 2f       	mov	r28, r24
     702:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     706:	2c 2f       	mov	r18, r28
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	32 2f       	mov	r19, r18
     70c:	22 27       	eor	r18, r18
     70e:	28 2b       	or	r18, r24
     710:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <Temperature_raw+0x1>
     714:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <Temperature_raw>
	Gyro_x_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     718:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     71c:	c8 2f       	mov	r28, r24
     71e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     722:	2c 2f       	mov	r18, r28
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	32 2f       	mov	r19, r18
     728:	22 27       	eor	r18, r18
     72a:	28 2b       	or	r18, r24
     72c:	30 93 dd 00 	sts	0x00DD, r19	; 0x8000dd <Gyro_x_raw+0x1>
     730:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <Gyro_x_raw>
	Gyro_y_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     734:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     738:	c8 2f       	mov	r28, r24
     73a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     73e:	2c 2f       	mov	r18, r28
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	32 2f       	mov	r19, r18
     744:	22 27       	eor	r18, r18
     746:	28 2b       	or	r18, r24
     748:	30 93 cf 00 	sts	0x00CF, r19	; 0x8000cf <Gyro_y_raw+0x1>
     74c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <Gyro_y_raw>
	Gyro_z_raw = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     750:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Read_Ack>
     754:	c8 2f       	mov	r28, r24
     756:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_Read_Nack>
     75a:	2c 2f       	mov	r18, r28
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	32 2f       	mov	r19, r18
     760:	22 27       	eor	r18, r18
     762:	28 2b       	or	r18, r24
     764:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <__data_end+0x1>
     768:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <__data_end>
	I2C_Stop();
     76c:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Stop>
	
	Acc_x_pro =(float) Acc_x_raw/16384.0;
     770:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <Acc_x_raw>
     774:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <Acc_x_raw+0x1>
     778:	07 2e       	mov	r0, r23
     77a:	00 0c       	add	r0, r0
     77c:	88 0b       	sbc	r24, r24
     77e:	99 0b       	sbc	r25, r25
     780:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e8       	ldi	r20, 0x80	; 128
     78a:	58 e3       	ldi	r21, 0x38	; 56
     78c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     790:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <Acc_x_pro>
     794:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <Acc_x_pro+0x1>
     798:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <Acc_x_pro+0x2>
     79c:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <Acc_x_pro+0x3>
	Acc_y_pro = (float)Acc_y_raw/16384.0;
     7a0:	60 91 e2 00 	lds	r22, 0x00E2	; 0x8000e2 <Acc_y_raw>
     7a4:	70 91 e3 00 	lds	r23, 0x00E3	; 0x8000e3 <Acc_y_raw+0x1>
     7a8:	07 2e       	mov	r0, r23
     7aa:	00 0c       	add	r0, r0
     7ac:	88 0b       	sbc	r24, r24
     7ae:	99 0b       	sbc	r25, r25
     7b0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e8       	ldi	r20, 0x80	; 128
     7ba:	58 e3       	ldi	r21, 0x38	; 56
     7bc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     7c0:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <Acc_y_pro>
     7c4:	70 93 b3 00 	sts	0x00B3, r23	; 0x8000b3 <Acc_y_pro+0x1>
     7c8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <Acc_y_pro+0x2>
     7cc:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <Acc_y_pro+0x3>
	Acc_z_pro =(float) Acc_z_raw/16384.0;
     7d0:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Acc_z_raw>
     7d4:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Acc_z_raw+0x1>
     7d8:	07 2e       	mov	r0, r23
     7da:	00 0c       	add	r0, r0
     7dc:	88 0b       	sbc	r24, r24
     7de:	99 0b       	sbc	r25, r25
     7e0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e8       	ldi	r20, 0x80	; 128
     7ea:	58 e3       	ldi	r21, 0x38	; 56
     7ec:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     7f0:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <Acc_z_pro>
     7f4:	70 93 e5 00 	sts	0x00E5, r23	; 0x8000e5 <Acc_z_pro+0x1>
     7f8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <Acc_z_pro+0x2>
     7fc:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <Acc_z_pro+0x3>
	
	Gyro_x_pro = (float)Gyro_x_raw*0.01745392/131 ;       //converted into radians 
	Gyro_y_pro = (float)Gyro_y_raw*0.01745392/131;
     800:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <Gyro_y_raw>
     804:	70 91 cf 00 	lds	r23, 0x00CF	; 0x8000cf <Gyro_y_raw+0x1>
     808:	07 2e       	mov	r0, r23
     80a:	00 0c       	add	r0, r0
     80c:	88 0b       	sbc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     814:	26 e8       	ldi	r18, 0x86	; 134
     816:	3b ef       	ldi	r19, 0xFB	; 251
     818:	4e e8       	ldi	r20, 0x8E	; 142
     81a:	5c e3       	ldi	r21, 0x3C	; 60
     81c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	43 e0       	ldi	r20, 0x03	; 3
     826:	53 e4       	ldi	r21, 0x43	; 67
     828:	0e 94 75 05 	call	0xaea	; 0xaea <__divsf3>
     82c:	6b 01       	movw	r12, r22
     82e:	7c 01       	movw	r14, r24
	Gyro_z_pro =(float) Gyro_z_raw*0.01745392/131;
     830:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     834:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__data_end+0x1>
     838:	bc 01       	movw	r22, r24
     83a:	99 0f       	add	r25, r25
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     844:	26 e8       	ldi	r18, 0x86	; 134
     846:	3b ef       	ldi	r19, 0xFB	; 251
     848:	4e e8       	ldi	r20, 0x8E	; 142
     84a:	5c e3       	ldi	r21, 0x3C	; 60
     84c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	43 e0       	ldi	r20, 0x03	; 3
     856:	53 e4       	ldi	r21, 0x43	; 67
     858:	0e 94 75 05 	call	0xaea	; 0xaea <__divsf3>
     85c:	4b 01       	movw	r8, r22
     85e:	5c 01       	movw	r10, r24
	
	Acc_x_pro =(float) Acc_x_raw/16384.0;
	Acc_y_pro = (float)Acc_y_raw/16384.0;
	Acc_z_pro =(float) Acc_z_raw/16384.0;
	
	Gyro_x_pro = (float)Gyro_x_raw*0.01745392/131 ;       //converted into radians 
     860:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <Gyro_x_raw>
     864:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <Gyro_x_raw+0x1>
     868:	bc 01       	movw	r22, r24
     86a:	99 0f       	add	r25, r25
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
     874:	26 e8       	ldi	r18, 0x86	; 134
     876:	3b ef       	ldi	r19, 0xFB	; 251
     878:	4e e8       	ldi	r20, 0x8E	; 142
     87a:	5c e3       	ldi	r21, 0x3C	; 60
     87c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	43 e0       	ldi	r20, 0x03	; 3
     886:	53 e4       	ldi	r21, 0x43	; 67
     888:	0e 94 75 05 	call	0xaea	; 0xaea <__divsf3>
	Gyro_y_pro = (float)Gyro_y_raw*0.01745392/131;
	Gyro_z_pro =(float) Gyro_z_raw*0.01745392/131;
	
	Gyro_x_pro+=0.0337758;          //offsets value are cleared
     88c:	2e e7       	ldi	r18, 0x7E	; 126
     88e:	38 e5       	ldi	r19, 0x58	; 88
     890:	4a e0       	ldi	r20, 0x0A	; 10
     892:	5d e3       	ldi	r21, 0x3D	; 61
     894:	0e 94 09 05 	call	0xa12	; 0xa12 <__addsf3>
     898:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <Gyro_x_pro>
     89c:	70 93 c7 00 	sts	0x00C7, r23	; 0x8000c7 <Gyro_x_pro+0x1>
     8a0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <Gyro_x_pro+0x2>
     8a4:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <Gyro_x_pro+0x3>
	Gyro_y_pro-=0.0240322;
     8a8:	2d e2       	ldi	r18, 0x2D	; 45
     8aa:	3f ed       	ldi	r19, 0xDF	; 223
     8ac:	44 ec       	ldi	r20, 0xC4	; 196
     8ae:	5c e3       	ldi	r21, 0x3C	; 60
     8b0:	c7 01       	movw	r24, r14
     8b2:	b6 01       	movw	r22, r12
     8b4:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
     8b8:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <Gyro_y_pro>
     8bc:	70 93 c3 00 	sts	0x00C3, r23	; 0x8000c3 <Gyro_y_pro+0x1>
     8c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Gyro_y_pro+0x2>
     8c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <Gyro_y_pro+0x3>
	Gyro_z_pro-=0.0160796;
     8c8:	2e e5       	ldi	r18, 0x5E	; 94
     8ca:	39 eb       	ldi	r19, 0xB9	; 185
     8cc:	43 e8       	ldi	r20, 0x83	; 131
     8ce:	5c e3       	ldi	r21, 0x3C	; 60
     8d0:	c5 01       	movw	r24, r10
     8d2:	b4 01       	movw	r22, r8
     8d4:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
     8d8:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <Gyro_z_pro>
     8dc:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <Gyro_z_pro+0x1>
     8e0:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Gyro_z_pro+0x2>
     8e4:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Gyro_z_pro+0x3>
}
     8e8:	cf 91       	pop	r28
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	08 95       	ret

000008fc <Gyro_off_calculation>:

 
 void Gyro_off_calculation()
   {
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	c0 e1       	ldi	r28, 0x10	; 16
     902:	d7 e2       	ldi	r29, 0x27	; 39
   	 for(int i=0;i<10000;i++)
  	   {  Read_RawValue();
     904:	0e 94 49 03 	call	0x692	; 0x692 <Read_RawValue>
		  Gyro_x_off+=Gyro_x_pro;
     908:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <Gyro_x_pro>
     90c:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <Gyro_x_pro+0x1>
     910:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <Gyro_x_pro+0x2>
     914:	50 91 c9 00 	lds	r21, 0x00C9	; 0x8000c9 <Gyro_x_pro+0x3>
     918:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <Gyro_x_off>
     91c:	70 91 d9 00 	lds	r23, 0x00D9	; 0x8000d9 <Gyro_x_off+0x1>
     920:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Gyro_x_off+0x2>
     924:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <Gyro_x_off+0x3>
     928:	0e 94 09 05 	call	0xa12	; 0xa12 <__addsf3>
     92c:	60 93 d8 00 	sts	0x00D8, r22	; 0x8000d8 <Gyro_x_off>
     930:	70 93 d9 00 	sts	0x00D9, r23	; 0x8000d9 <Gyro_x_off+0x1>
     934:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Gyro_x_off+0x2>
     938:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <Gyro_x_off+0x3>
		  Gyro_y_off+=Gyro_y_pro;
     93c:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <Gyro_y_pro>
     940:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <Gyro_y_pro+0x1>
     944:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <Gyro_y_pro+0x2>
     948:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <Gyro_y_pro+0x3>
     94c:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <Gyro_y_off>
     950:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <Gyro_y_off+0x1>
     954:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Gyro_y_off+0x2>
     958:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <Gyro_y_off+0x3>
     95c:	0e 94 09 05 	call	0xa12	; 0xa12 <__addsf3>
     960:	60 93 ca 00 	sts	0x00CA, r22	; 0x8000ca <Gyro_y_off>
     964:	70 93 cb 00 	sts	0x00CB, r23	; 0x8000cb <Gyro_y_off+0x1>
     968:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Gyro_y_off+0x2>
     96c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <Gyro_y_off+0x3>
		  Gyro_z_off+=Gyro_z_pro;
     970:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <Gyro_z_pro>
     974:	30 91 bd 00 	lds	r19, 0x00BD	; 0x8000bd <Gyro_z_pro+0x1>
     978:	40 91 be 00 	lds	r20, 0x00BE	; 0x8000be <Gyro_z_pro+0x2>
     97c:	50 91 bf 00 	lds	r21, 0x00BF	; 0x8000bf <Gyro_z_pro+0x3>
     980:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <Gyro_z_off>
     984:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <Gyro_z_off+0x1>
     988:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Gyro_z_off+0x2>
     98c:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <Gyro_z_off+0x3>
     990:	0e 94 09 05 	call	0xa12	; 0xa12 <__addsf3>
     994:	60 93 de 00 	sts	0x00DE, r22	; 0x8000de <Gyro_z_off>
     998:	70 93 df 00 	sts	0x00DF, r23	; 0x8000df <Gyro_z_off+0x1>
     99c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <Gyro_z_off+0x2>
     9a0:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <Gyro_z_off+0x3>
     9a4:	21 97       	sbiw	r28, 0x01	; 1
}

 
 void Gyro_off_calculation()
   {
   	 for(int i=0;i<10000;i++)
     9a6:	09 f0       	breq	.+2      	; 0x9aa <Gyro_off_calculation+0xae>
     9a8:	ad cf       	rjmp	.-166    	; 0x904 <Gyro_off_calculation+0x8>

// 		 lcd_gotoxy(1,1);
// 		 lcd_string("X:");
// 		 lcd_float_print(Gyro_x_off,4,4);
		 
		  lcd_gotoxy(2,1);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_gotoxy>
		  lcd_string("Y:");
     9b6:	83 ea       	ldi	r24, 0xA3	; 163
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 90 01 	call	0x320	; 0x320 <lcd_string>
		  lcd_float_print(Gyro_y_off,4,4);
     9be:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <Gyro_y_off>
     9c2:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <Gyro_y_off+0x1>
     9c6:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Gyro_y_off+0x2>
     9ca:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <Gyro_y_off+0x3>
     9ce:	24 e0       	ldi	r18, 0x04	; 4
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	44 e0       	ldi	r20, 0x04	; 4
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_float_print>
		  
		   lcd_gotoxy(1,1);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_gotoxy>
		   lcd_string("Z:");
     9e6:	86 ea       	ldi	r24, 0xA6	; 166
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 90 01 	call	0x320	; 0x320 <lcd_string>
		   lcd_float_print(Gyro_z_off,4,4);
     9ee:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <Gyro_z_off>
     9f2:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <Gyro_z_off+0x1>
     9f6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Gyro_z_off+0x2>
     9fa:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <Gyro_z_off+0x3>
     9fe:	24 e0       	ldi	r18, 0x04	; 4
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	44 e0       	ldi	r20, 0x04	; 4
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_float_print>
		   
		   
		   //remember to divide by 10000(rad)
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <__subsf3>:
     a10:	50 58       	subi	r21, 0x80	; 128

00000a12 <__addsf3>:
     a12:	bb 27       	eor	r27, r27
     a14:	aa 27       	eor	r26, r26
     a16:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3x>
     a1a:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_round>
     a1e:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_pscA>
     a22:	38 f0       	brcs	.+14     	; 0xa32 <__addsf3+0x20>
     a24:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_pscB>
     a28:	20 f0       	brcs	.+8      	; 0xa32 <__addsf3+0x20>
     a2a:	39 f4       	brne	.+14     	; 0xa3a <__addsf3+0x28>
     a2c:	9f 3f       	cpi	r25, 0xFF	; 255
     a2e:	19 f4       	brne	.+6      	; 0xa36 <__addsf3+0x24>
     a30:	26 f4       	brtc	.+8      	; 0xa3a <__addsf3+0x28>
     a32:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_nan>
     a36:	0e f4       	brtc	.+2      	; 0xa3a <__addsf3+0x28>
     a38:	e0 95       	com	r30
     a3a:	e7 fb       	bst	r30, 7
     a3c:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>

00000a40 <__addsf3x>:
     a40:	e9 2f       	mov	r30, r25
     a42:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_split3>
     a46:	58 f3       	brcs	.-42     	; 0xa1e <__addsf3+0xc>
     a48:	ba 17       	cp	r27, r26
     a4a:	62 07       	cpc	r22, r18
     a4c:	73 07       	cpc	r23, r19
     a4e:	84 07       	cpc	r24, r20
     a50:	95 07       	cpc	r25, r21
     a52:	20 f0       	brcs	.+8      	; 0xa5c <__addsf3x+0x1c>
     a54:	79 f4       	brne	.+30     	; 0xa74 <__addsf3x+0x34>
     a56:	a6 f5       	brtc	.+104    	; 0xac0 <__addsf3x+0x80>
     a58:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_zero>
     a5c:	0e f4       	brtc	.+2      	; 0xa60 <__addsf3x+0x20>
     a5e:	e0 95       	com	r30
     a60:	0b 2e       	mov	r0, r27
     a62:	ba 2f       	mov	r27, r26
     a64:	a0 2d       	mov	r26, r0
     a66:	0b 01       	movw	r0, r22
     a68:	b9 01       	movw	r22, r18
     a6a:	90 01       	movw	r18, r0
     a6c:	0c 01       	movw	r0, r24
     a6e:	ca 01       	movw	r24, r20
     a70:	a0 01       	movw	r20, r0
     a72:	11 24       	eor	r1, r1
     a74:	ff 27       	eor	r31, r31
     a76:	59 1b       	sub	r21, r25
     a78:	99 f0       	breq	.+38     	; 0xaa0 <__addsf3x+0x60>
     a7a:	59 3f       	cpi	r21, 0xF9	; 249
     a7c:	50 f4       	brcc	.+20     	; 0xa92 <__addsf3x+0x52>
     a7e:	50 3e       	cpi	r21, 0xE0	; 224
     a80:	68 f1       	brcs	.+90     	; 0xadc <__addsf3x+0x9c>
     a82:	1a 16       	cp	r1, r26
     a84:	f0 40       	sbci	r31, 0x00	; 0
     a86:	a2 2f       	mov	r26, r18
     a88:	23 2f       	mov	r18, r19
     a8a:	34 2f       	mov	r19, r20
     a8c:	44 27       	eor	r20, r20
     a8e:	58 5f       	subi	r21, 0xF8	; 248
     a90:	f3 cf       	rjmp	.-26     	; 0xa78 <__addsf3x+0x38>
     a92:	46 95       	lsr	r20
     a94:	37 95       	ror	r19
     a96:	27 95       	ror	r18
     a98:	a7 95       	ror	r26
     a9a:	f0 40       	sbci	r31, 0x00	; 0
     a9c:	53 95       	inc	r21
     a9e:	c9 f7       	brne	.-14     	; 0xa92 <__addsf3x+0x52>
     aa0:	7e f4       	brtc	.+30     	; 0xac0 <__addsf3x+0x80>
     aa2:	1f 16       	cp	r1, r31
     aa4:	ba 0b       	sbc	r27, r26
     aa6:	62 0b       	sbc	r22, r18
     aa8:	73 0b       	sbc	r23, r19
     aaa:	84 0b       	sbc	r24, r20
     aac:	ba f0       	brmi	.+46     	; 0xadc <__addsf3x+0x9c>
     aae:	91 50       	subi	r25, 0x01	; 1
     ab0:	a1 f0       	breq	.+40     	; 0xada <__addsf3x+0x9a>
     ab2:	ff 0f       	add	r31, r31
     ab4:	bb 1f       	adc	r27, r27
     ab6:	66 1f       	adc	r22, r22
     ab8:	77 1f       	adc	r23, r23
     aba:	88 1f       	adc	r24, r24
     abc:	c2 f7       	brpl	.-16     	; 0xaae <__addsf3x+0x6e>
     abe:	0e c0       	rjmp	.+28     	; 0xadc <__addsf3x+0x9c>
     ac0:	ba 0f       	add	r27, r26
     ac2:	62 1f       	adc	r22, r18
     ac4:	73 1f       	adc	r23, r19
     ac6:	84 1f       	adc	r24, r20
     ac8:	48 f4       	brcc	.+18     	; 0xadc <__addsf3x+0x9c>
     aca:	87 95       	ror	r24
     acc:	77 95       	ror	r23
     ace:	67 95       	ror	r22
     ad0:	b7 95       	ror	r27
     ad2:	f7 95       	ror	r31
     ad4:	9e 3f       	cpi	r25, 0xFE	; 254
     ad6:	08 f0       	brcs	.+2      	; 0xada <__addsf3x+0x9a>
     ad8:	b0 cf       	rjmp	.-160    	; 0xa3a <__addsf3+0x28>
     ada:	93 95       	inc	r25
     adc:	88 0f       	add	r24, r24
     ade:	08 f0       	brcs	.+2      	; 0xae2 <__addsf3x+0xa2>
     ae0:	99 27       	eor	r25, r25
     ae2:	ee 0f       	add	r30, r30
     ae4:	97 95       	ror	r25
     ae6:	87 95       	ror	r24
     ae8:	08 95       	ret

00000aea <__divsf3>:
     aea:	0e 94 89 05 	call	0xb12	; 0xb12 <__divsf3x>
     aee:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_round>
     af2:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_pscB>
     af6:	58 f0       	brcs	.+22     	; 0xb0e <__divsf3+0x24>
     af8:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_pscA>
     afc:	40 f0       	brcs	.+16     	; 0xb0e <__divsf3+0x24>
     afe:	29 f4       	brne	.+10     	; 0xb0a <__divsf3+0x20>
     b00:	5f 3f       	cpi	r21, 0xFF	; 255
     b02:	29 f0       	breq	.+10     	; 0xb0e <__divsf3+0x24>
     b04:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>
     b08:	51 11       	cpse	r21, r1
     b0a:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     b0e:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_nan>

00000b12 <__divsf3x>:
     b12:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_split3>
     b16:	68 f3       	brcs	.-38     	; 0xaf2 <__divsf3+0x8>

00000b18 <__divsf3_pse>:
     b18:	99 23       	and	r25, r25
     b1a:	b1 f3       	breq	.-20     	; 0xb08 <__divsf3+0x1e>
     b1c:	55 23       	and	r21, r21
     b1e:	91 f3       	breq	.-28     	; 0xb04 <__divsf3+0x1a>
     b20:	95 1b       	sub	r25, r21
     b22:	55 0b       	sbc	r21, r21
     b24:	bb 27       	eor	r27, r27
     b26:	aa 27       	eor	r26, r26
     b28:	62 17       	cp	r22, r18
     b2a:	73 07       	cpc	r23, r19
     b2c:	84 07       	cpc	r24, r20
     b2e:	38 f0       	brcs	.+14     	; 0xb3e <__divsf3_pse+0x26>
     b30:	9f 5f       	subi	r25, 0xFF	; 255
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	22 0f       	add	r18, r18
     b36:	33 1f       	adc	r19, r19
     b38:	44 1f       	adc	r20, r20
     b3a:	aa 1f       	adc	r26, r26
     b3c:	a9 f3       	breq	.-22     	; 0xb28 <__divsf3_pse+0x10>
     b3e:	35 d0       	rcall	.+106    	; 0xbaa <__divsf3_pse+0x92>
     b40:	0e 2e       	mov	r0, r30
     b42:	3a f0       	brmi	.+14     	; 0xb52 <__divsf3_pse+0x3a>
     b44:	e0 e8       	ldi	r30, 0x80	; 128
     b46:	32 d0       	rcall	.+100    	; 0xbac <__divsf3_pse+0x94>
     b48:	91 50       	subi	r25, 0x01	; 1
     b4a:	50 40       	sbci	r21, 0x00	; 0
     b4c:	e6 95       	lsr	r30
     b4e:	00 1c       	adc	r0, r0
     b50:	ca f7       	brpl	.-14     	; 0xb44 <__divsf3_pse+0x2c>
     b52:	2b d0       	rcall	.+86     	; 0xbaa <__divsf3_pse+0x92>
     b54:	fe 2f       	mov	r31, r30
     b56:	29 d0       	rcall	.+82     	; 0xbaa <__divsf3_pse+0x92>
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	bb 1f       	adc	r27, r27
     b60:	26 17       	cp	r18, r22
     b62:	37 07       	cpc	r19, r23
     b64:	48 07       	cpc	r20, r24
     b66:	ab 07       	cpc	r26, r27
     b68:	b0 e8       	ldi	r27, 0x80	; 128
     b6a:	09 f0       	breq	.+2      	; 0xb6e <__divsf3_pse+0x56>
     b6c:	bb 0b       	sbc	r27, r27
     b6e:	80 2d       	mov	r24, r0
     b70:	bf 01       	movw	r22, r30
     b72:	ff 27       	eor	r31, r31
     b74:	93 58       	subi	r25, 0x83	; 131
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	3a f0       	brmi	.+14     	; 0xb88 <__divsf3_pse+0x70>
     b7a:	9e 3f       	cpi	r25, 0xFE	; 254
     b7c:	51 05       	cpc	r21, r1
     b7e:	78 f0       	brcs	.+30     	; 0xb9e <__divsf3_pse+0x86>
     b80:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>
     b84:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     b88:	5f 3f       	cpi	r21, 0xFF	; 255
     b8a:	e4 f3       	brlt	.-8      	; 0xb84 <__divsf3_pse+0x6c>
     b8c:	98 3e       	cpi	r25, 0xE8	; 232
     b8e:	d4 f3       	brlt	.-12     	; 0xb84 <__divsf3_pse+0x6c>
     b90:	86 95       	lsr	r24
     b92:	77 95       	ror	r23
     b94:	67 95       	ror	r22
     b96:	b7 95       	ror	r27
     b98:	f7 95       	ror	r31
     b9a:	9f 5f       	subi	r25, 0xFF	; 255
     b9c:	c9 f7       	brne	.-14     	; 0xb90 <__divsf3_pse+0x78>
     b9e:	88 0f       	add	r24, r24
     ba0:	91 1d       	adc	r25, r1
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	97 f9       	bld	r25, 7
     ba8:	08 95       	ret
     baa:	e1 e0       	ldi	r30, 0x01	; 1
     bac:	66 0f       	add	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	88 1f       	adc	r24, r24
     bb2:	bb 1f       	adc	r27, r27
     bb4:	62 17       	cp	r22, r18
     bb6:	73 07       	cpc	r23, r19
     bb8:	84 07       	cpc	r24, r20
     bba:	ba 07       	cpc	r27, r26
     bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__divsf3_pse+0xae>
     bbe:	62 1b       	sub	r22, r18
     bc0:	73 0b       	sbc	r23, r19
     bc2:	84 0b       	sbc	r24, r20
     bc4:	ba 0b       	sbc	r27, r26
     bc6:	ee 1f       	adc	r30, r30
     bc8:	88 f7       	brcc	.-30     	; 0xbac <__divsf3_pse+0x94>
     bca:	e0 95       	com	r30
     bcc:	08 95       	ret

00000bce <__fixsfsi>:
     bce:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fixunssfsi>
     bd2:	68 94       	set
     bd4:	b1 11       	cpse	r27, r1
     bd6:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     bda:	08 95       	ret

00000bdc <__fixunssfsi>:
     bdc:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_splitA>
     be0:	88 f0       	brcs	.+34     	; 0xc04 <__fixunssfsi+0x28>
     be2:	9f 57       	subi	r25, 0x7F	; 127
     be4:	98 f0       	brcs	.+38     	; 0xc0c <__fixunssfsi+0x30>
     be6:	b9 2f       	mov	r27, r25
     be8:	99 27       	eor	r25, r25
     bea:	b7 51       	subi	r27, 0x17	; 23
     bec:	b0 f0       	brcs	.+44     	; 0xc1a <__fixunssfsi+0x3e>
     bee:	e1 f0       	breq	.+56     	; 0xc28 <__fixunssfsi+0x4c>
     bf0:	66 0f       	add	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	1a f0       	brmi	.+6      	; 0xc00 <__fixunssfsi+0x24>
     bfa:	ba 95       	dec	r27
     bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__fixunssfsi+0x14>
     bfe:	14 c0       	rjmp	.+40     	; 0xc28 <__fixunssfsi+0x4c>
     c00:	b1 30       	cpi	r27, 0x01	; 1
     c02:	91 f0       	breq	.+36     	; 0xc28 <__fixunssfsi+0x4c>
     c04:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_zero>
     c08:	b1 e0       	ldi	r27, 0x01	; 1
     c0a:	08 95       	ret
     c0c:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_zero>
     c10:	67 2f       	mov	r22, r23
     c12:	78 2f       	mov	r23, r24
     c14:	88 27       	eor	r24, r24
     c16:	b8 5f       	subi	r27, 0xF8	; 248
     c18:	39 f0       	breq	.+14     	; 0xc28 <__fixunssfsi+0x4c>
     c1a:	b9 3f       	cpi	r27, 0xF9	; 249
     c1c:	cc f3       	brlt	.-14     	; 0xc10 <__fixunssfsi+0x34>
     c1e:	86 95       	lsr	r24
     c20:	77 95       	ror	r23
     c22:	67 95       	ror	r22
     c24:	b3 95       	inc	r27
     c26:	d9 f7       	brne	.-10     	; 0xc1e <__fixunssfsi+0x42>
     c28:	3e f4       	brtc	.+14     	; 0xc38 <__fixunssfsi+0x5c>
     c2a:	90 95       	com	r25
     c2c:	80 95       	com	r24
     c2e:	70 95       	com	r23
     c30:	61 95       	neg	r22
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	8f 4f       	sbci	r24, 0xFF	; 255
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	08 95       	ret

00000c3a <__floatunsisf>:
     c3a:	e8 94       	clt
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <__floatsisf+0x12>

00000c3e <__floatsisf>:
     c3e:	97 fb       	bst	r25, 7
     c40:	3e f4       	brtc	.+14     	; 0xc50 <__floatsisf+0x12>
     c42:	90 95       	com	r25
     c44:	80 95       	com	r24
     c46:	70 95       	com	r23
     c48:	61 95       	neg	r22
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	8f 4f       	sbci	r24, 0xFF	; 255
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	99 23       	and	r25, r25
     c52:	a9 f0       	breq	.+42     	; 0xc7e <__floatsisf+0x40>
     c54:	f9 2f       	mov	r31, r25
     c56:	96 e9       	ldi	r25, 0x96	; 150
     c58:	bb 27       	eor	r27, r27
     c5a:	93 95       	inc	r25
     c5c:	f6 95       	lsr	r31
     c5e:	87 95       	ror	r24
     c60:	77 95       	ror	r23
     c62:	67 95       	ror	r22
     c64:	b7 95       	ror	r27
     c66:	f1 11       	cpse	r31, r1
     c68:	f8 cf       	rjmp	.-16     	; 0xc5a <__floatsisf+0x1c>
     c6a:	fa f4       	brpl	.+62     	; 0xcaa <__floatsisf+0x6c>
     c6c:	bb 0f       	add	r27, r27
     c6e:	11 f4       	brne	.+4      	; 0xc74 <__floatsisf+0x36>
     c70:	60 ff       	sbrs	r22, 0
     c72:	1b c0       	rjmp	.+54     	; 0xcaa <__floatsisf+0x6c>
     c74:	6f 5f       	subi	r22, 0xFF	; 255
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	8f 4f       	sbci	r24, 0xFF	; 255
     c7a:	9f 4f       	sbci	r25, 0xFF	; 255
     c7c:	16 c0       	rjmp	.+44     	; 0xcaa <__floatsisf+0x6c>
     c7e:	88 23       	and	r24, r24
     c80:	11 f0       	breq	.+4      	; 0xc86 <__floatsisf+0x48>
     c82:	96 e9       	ldi	r25, 0x96	; 150
     c84:	11 c0       	rjmp	.+34     	; 0xca8 <__floatsisf+0x6a>
     c86:	77 23       	and	r23, r23
     c88:	21 f0       	breq	.+8      	; 0xc92 <__floatsisf+0x54>
     c8a:	9e e8       	ldi	r25, 0x8E	; 142
     c8c:	87 2f       	mov	r24, r23
     c8e:	76 2f       	mov	r23, r22
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <__floatsisf+0x5e>
     c92:	66 23       	and	r22, r22
     c94:	71 f0       	breq	.+28     	; 0xcb2 <__floatsisf+0x74>
     c96:	96 e8       	ldi	r25, 0x86	; 134
     c98:	86 2f       	mov	r24, r22
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	2a f0       	brmi	.+10     	; 0xcaa <__floatsisf+0x6c>
     ca0:	9a 95       	dec	r25
     ca2:	66 0f       	add	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	88 1f       	adc	r24, r24
     ca8:	da f7       	brpl	.-10     	; 0xca0 <__floatsisf+0x62>
     caa:	88 0f       	add	r24, r24
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	97 f9       	bld	r25, 7
     cb2:	08 95       	ret

00000cb4 <__fp_inf>:
     cb4:	97 f9       	bld	r25, 7
     cb6:	9f 67       	ori	r25, 0x7F	; 127
     cb8:	80 e8       	ldi	r24, 0x80	; 128
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	08 95       	ret

00000cc0 <__fp_nan>:
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	80 ec       	ldi	r24, 0xC0	; 192
     cc4:	08 95       	ret

00000cc6 <__fp_powser>:
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	1f 93       	push	r17
     ccc:	0f 93       	push	r16
     cce:	ff 92       	push	r15
     cd0:	ef 92       	push	r14
     cd2:	df 92       	push	r13
     cd4:	7b 01       	movw	r14, r22
     cd6:	8c 01       	movw	r16, r24
     cd8:	68 94       	set
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <__fp_powser+0x22>
     cdc:	da 2e       	mov	r13, r26
     cde:	ef 01       	movw	r28, r30
     ce0:	0e 94 ed 06 	call	0xdda	; 0xdda <__mulsf3x>
     ce4:	fe 01       	movw	r30, r28
     ce6:	e8 94       	clt
     ce8:	a5 91       	lpm	r26, Z+
     cea:	25 91       	lpm	r18, Z+
     cec:	35 91       	lpm	r19, Z+
     cee:	45 91       	lpm	r20, Z+
     cf0:	55 91       	lpm	r21, Z+
     cf2:	a6 f3       	brts	.-24     	; 0xcdc <__fp_powser+0x16>
     cf4:	ef 01       	movw	r28, r30
     cf6:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3x>
     cfa:	fe 01       	movw	r30, r28
     cfc:	97 01       	movw	r18, r14
     cfe:	a8 01       	movw	r20, r16
     d00:	da 94       	dec	r13
     d02:	69 f7       	brne	.-38     	; 0xcde <__fp_powser+0x18>
     d04:	df 90       	pop	r13
     d06:	ef 90       	pop	r14
     d08:	ff 90       	pop	r15
     d0a:	0f 91       	pop	r16
     d0c:	1f 91       	pop	r17
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <__fp_pscA>:
     d14:	00 24       	eor	r0, r0
     d16:	0a 94       	dec	r0
     d18:	16 16       	cp	r1, r22
     d1a:	17 06       	cpc	r1, r23
     d1c:	18 06       	cpc	r1, r24
     d1e:	09 06       	cpc	r0, r25
     d20:	08 95       	ret

00000d22 <__fp_pscB>:
     d22:	00 24       	eor	r0, r0
     d24:	0a 94       	dec	r0
     d26:	12 16       	cp	r1, r18
     d28:	13 06       	cpc	r1, r19
     d2a:	14 06       	cpc	r1, r20
     d2c:	05 06       	cpc	r0, r21
     d2e:	08 95       	ret

00000d30 <__fp_round>:
     d30:	09 2e       	mov	r0, r25
     d32:	03 94       	inc	r0
     d34:	00 0c       	add	r0, r0
     d36:	11 f4       	brne	.+4      	; 0xd3c <__fp_round+0xc>
     d38:	88 23       	and	r24, r24
     d3a:	52 f0       	brmi	.+20     	; 0xd50 <__fp_round+0x20>
     d3c:	bb 0f       	add	r27, r27
     d3e:	40 f4       	brcc	.+16     	; 0xd50 <__fp_round+0x20>
     d40:	bf 2b       	or	r27, r31
     d42:	11 f4       	brne	.+4      	; 0xd48 <__fp_round+0x18>
     d44:	60 ff       	sbrs	r22, 0
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__fp_round+0x20>
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	8f 4f       	sbci	r24, 0xFF	; 255
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	08 95       	ret

00000d52 <__fp_split3>:
     d52:	57 fd       	sbrc	r21, 7
     d54:	90 58       	subi	r25, 0x80	; 128
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	59 f0       	breq	.+22     	; 0xd72 <__fp_splitA+0x10>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	71 f0       	breq	.+28     	; 0xd7c <__fp_splitA+0x1a>
     d60:	47 95       	ror	r20

00000d62 <__fp_splitA>:
     d62:	88 0f       	add	r24, r24
     d64:	97 fb       	bst	r25, 7
     d66:	99 1f       	adc	r25, r25
     d68:	61 f0       	breq	.+24     	; 0xd82 <__fp_splitA+0x20>
     d6a:	9f 3f       	cpi	r25, 0xFF	; 255
     d6c:	79 f0       	breq	.+30     	; 0xd8c <__fp_splitA+0x2a>
     d6e:	87 95       	ror	r24
     d70:	08 95       	ret
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	14 06       	cpc	r1, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	f2 cf       	rjmp	.-28     	; 0xd60 <__fp_split3+0xe>
     d7c:	46 95       	lsr	r20
     d7e:	f1 df       	rcall	.-30     	; 0xd62 <__fp_splitA>
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <__fp_splitA+0x30>
     d82:	16 16       	cp	r1, r22
     d84:	17 06       	cpc	r1, r23
     d86:	18 06       	cpc	r1, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	f1 cf       	rjmp	.-30     	; 0xd6e <__fp_splitA+0xc>
     d8c:	86 95       	lsr	r24
     d8e:	71 05       	cpc	r23, r1
     d90:	61 05       	cpc	r22, r1
     d92:	08 94       	sec
     d94:	08 95       	ret

00000d96 <__fp_zero>:
     d96:	e8 94       	clt

00000d98 <__fp_szero>:
     d98:	bb 27       	eor	r27, r27
     d9a:	66 27       	eor	r22, r22
     d9c:	77 27       	eor	r23, r23
     d9e:	cb 01       	movw	r24, r22
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret

00000da4 <inverse>:
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 e8       	ldi	r24, 0x80	; 128
     dae:	9f e3       	ldi	r25, 0x3F	; 63
     db0:	0c 94 75 05 	jmp	0xaea	; 0xaea <__divsf3>

00000db4 <__mulsf3>:
     db4:	0e 94 ed 06 	call	0xdda	; 0xdda <__mulsf3x>
     db8:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_round>
     dbc:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_pscA>
     dc0:	38 f0       	brcs	.+14     	; 0xdd0 <__mulsf3+0x1c>
     dc2:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_pscB>
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__mulsf3+0x1c>
     dc8:	95 23       	and	r25, r21
     dca:	11 f0       	breq	.+4      	; 0xdd0 <__mulsf3+0x1c>
     dcc:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>
     dd0:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_nan>
     dd4:	11 24       	eor	r1, r1
     dd6:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>

00000dda <__mulsf3x>:
     dda:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_split3>
     dde:	70 f3       	brcs	.-36     	; 0xdbc <__mulsf3+0x8>

00000de0 <__mulsf3_pse>:
     de0:	95 9f       	mul	r25, r21
     de2:	c1 f3       	breq	.-16     	; 0xdd4 <__mulsf3+0x20>
     de4:	95 0f       	add	r25, r21
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	55 1f       	adc	r21, r21
     dea:	62 9f       	mul	r22, r18
     dec:	f0 01       	movw	r30, r0
     dee:	72 9f       	mul	r23, r18
     df0:	bb 27       	eor	r27, r27
     df2:	f0 0d       	add	r31, r0
     df4:	b1 1d       	adc	r27, r1
     df6:	63 9f       	mul	r22, r19
     df8:	aa 27       	eor	r26, r26
     dfa:	f0 0d       	add	r31, r0
     dfc:	b1 1d       	adc	r27, r1
     dfe:	aa 1f       	adc	r26, r26
     e00:	64 9f       	mul	r22, r20
     e02:	66 27       	eor	r22, r22
     e04:	b0 0d       	add	r27, r0
     e06:	a1 1d       	adc	r26, r1
     e08:	66 1f       	adc	r22, r22
     e0a:	82 9f       	mul	r24, r18
     e0c:	22 27       	eor	r18, r18
     e0e:	b0 0d       	add	r27, r0
     e10:	a1 1d       	adc	r26, r1
     e12:	62 1f       	adc	r22, r18
     e14:	73 9f       	mul	r23, r19
     e16:	b0 0d       	add	r27, r0
     e18:	a1 1d       	adc	r26, r1
     e1a:	62 1f       	adc	r22, r18
     e1c:	83 9f       	mul	r24, r19
     e1e:	a0 0d       	add	r26, r0
     e20:	61 1d       	adc	r22, r1
     e22:	22 1f       	adc	r18, r18
     e24:	74 9f       	mul	r23, r20
     e26:	33 27       	eor	r19, r19
     e28:	a0 0d       	add	r26, r0
     e2a:	61 1d       	adc	r22, r1
     e2c:	23 1f       	adc	r18, r19
     e2e:	84 9f       	mul	r24, r20
     e30:	60 0d       	add	r22, r0
     e32:	21 1d       	adc	r18, r1
     e34:	82 2f       	mov	r24, r18
     e36:	76 2f       	mov	r23, r22
     e38:	6a 2f       	mov	r22, r26
     e3a:	11 24       	eor	r1, r1
     e3c:	9f 57       	subi	r25, 0x7F	; 127
     e3e:	50 40       	sbci	r21, 0x00	; 0
     e40:	9a f0       	brmi	.+38     	; 0xe68 <__mulsf3_pse+0x88>
     e42:	f1 f0       	breq	.+60     	; 0xe80 <__mulsf3_pse+0xa0>
     e44:	88 23       	and	r24, r24
     e46:	4a f0       	brmi	.+18     	; 0xe5a <__mulsf3_pse+0x7a>
     e48:	ee 0f       	add	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	bb 1f       	adc	r27, r27
     e4e:	66 1f       	adc	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	91 50       	subi	r25, 0x01	; 1
     e56:	50 40       	sbci	r21, 0x00	; 0
     e58:	a9 f7       	brne	.-22     	; 0xe44 <__mulsf3_pse+0x64>
     e5a:	9e 3f       	cpi	r25, 0xFE	; 254
     e5c:	51 05       	cpc	r21, r1
     e5e:	80 f0       	brcs	.+32     	; 0xe80 <__mulsf3_pse+0xa0>
     e60:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>
     e64:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     e68:	5f 3f       	cpi	r21, 0xFF	; 255
     e6a:	e4 f3       	brlt	.-8      	; 0xe64 <__mulsf3_pse+0x84>
     e6c:	98 3e       	cpi	r25, 0xE8	; 232
     e6e:	d4 f3       	brlt	.-12     	; 0xe64 <__mulsf3_pse+0x84>
     e70:	86 95       	lsr	r24
     e72:	77 95       	ror	r23
     e74:	67 95       	ror	r22
     e76:	b7 95       	ror	r27
     e78:	f7 95       	ror	r31
     e7a:	e7 95       	ror	r30
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	c1 f7       	brne	.-16     	; 0xe70 <__mulsf3_pse+0x90>
     e80:	fe 2b       	or	r31, r30
     e82:	88 0f       	add	r24, r24
     e84:	91 1d       	adc	r25, r1
     e86:	96 95       	lsr	r25
     e88:	87 95       	ror	r24
     e8a:	97 f9       	bld	r25, 7
     e8c:	08 95       	ret

00000e8e <pow>:
     e8e:	fa 01       	movw	r30, r20
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	30 96       	adiw	r30, 0x00	; 0
     e96:	21 05       	cpc	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	a1 f1       	breq	.+104    	; 0xf04 <pow+0x76>
     e9c:	61 15       	cp	r22, r1
     e9e:	71 05       	cpc	r23, r1
     ea0:	61 f4       	brne	.+24     	; 0xeba <pow+0x2c>
     ea2:	80 38       	cpi	r24, 0x80	; 128
     ea4:	bf e3       	ldi	r27, 0x3F	; 63
     ea6:	9b 07       	cpc	r25, r27
     ea8:	49 f1       	breq	.+82     	; 0xefc <pow+0x6e>
     eaa:	68 94       	set
     eac:	90 38       	cpi	r25, 0x80	; 128
     eae:	81 05       	cpc	r24, r1
     eb0:	61 f0       	breq	.+24     	; 0xeca <pow+0x3c>
     eb2:	80 38       	cpi	r24, 0x80	; 128
     eb4:	bf ef       	ldi	r27, 0xFF	; 255
     eb6:	9b 07       	cpc	r25, r27
     eb8:	41 f0       	breq	.+16     	; 0xeca <pow+0x3c>
     eba:	99 23       	and	r25, r25
     ebc:	4a f5       	brpl	.+82     	; 0xf10 <pow+0x82>
     ebe:	ff 3f       	cpi	r31, 0xFF	; 255
     ec0:	e1 05       	cpc	r30, r1
     ec2:	31 05       	cpc	r19, r1
     ec4:	21 05       	cpc	r18, r1
     ec6:	19 f1       	breq	.+70     	; 0xf0e <pow+0x80>
     ec8:	e8 94       	clt
     eca:	08 94       	sec
     ecc:	e7 95       	ror	r30
     ece:	d9 01       	movw	r26, r18
     ed0:	aa 23       	and	r26, r26
     ed2:	29 f4       	brne	.+10     	; 0xede <pow+0x50>
     ed4:	ab 2f       	mov	r26, r27
     ed6:	be 2f       	mov	r27, r30
     ed8:	f8 5f       	subi	r31, 0xF8	; 248
     eda:	d0 f3       	brcs	.-12     	; 0xed0 <pow+0x42>
     edc:	10 c0       	rjmp	.+32     	; 0xefe <pow+0x70>
     ede:	ff 5f       	subi	r31, 0xFF	; 255
     ee0:	70 f4       	brcc	.+28     	; 0xefe <pow+0x70>
     ee2:	a6 95       	lsr	r26
     ee4:	e0 f7       	brcc	.-8      	; 0xede <pow+0x50>
     ee6:	f7 39       	cpi	r31, 0x97	; 151
     ee8:	50 f0       	brcs	.+20     	; 0xefe <pow+0x70>
     eea:	19 f0       	breq	.+6      	; 0xef2 <pow+0x64>
     eec:	ff 3a       	cpi	r31, 0xAF	; 175
     eee:	38 f4       	brcc	.+14     	; 0xefe <pow+0x70>
     ef0:	9f 77       	andi	r25, 0x7F	; 127
     ef2:	9f 93       	push	r25
     ef4:	0d d0       	rcall	.+26     	; 0xf10 <pow+0x82>
     ef6:	0f 90       	pop	r0
     ef8:	07 fc       	sbrc	r0, 7
     efa:	90 58       	subi	r25, 0x80	; 128
     efc:	08 95       	ret
     efe:	46 f0       	brts	.+16     	; 0xf10 <pow+0x82>
     f00:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_nan>
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	80 e8       	ldi	r24, 0x80	; 128
     f0a:	9f e3       	ldi	r25, 0x3F	; 63
     f0c:	08 95       	ret
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	9f 77       	andi	r25, 0x7F	; 127
     f12:	5f 93       	push	r21
     f14:	4f 93       	push	r20
     f16:	3f 93       	push	r19
     f18:	2f 93       	push	r18
     f1a:	0e 94 21 08 	call	0x1042	; 0x1042 <log>
     f1e:	2f 91       	pop	r18
     f20:	3f 91       	pop	r19
     f22:	4f 91       	pop	r20
     f24:	5f 91       	pop	r21
     f26:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3>
     f2a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <exp>
     f2e:	29 f4       	brne	.+10     	; 0xf3a <pow+0xac>
     f30:	16 f0       	brts	.+4      	; 0xf36 <pow+0xa8>
     f32:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>
     f36:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_zero>
     f3a:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_nan>

00000f3e <exp>:
     f3e:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_splitA>
     f42:	a8 f3       	brcs	.-22     	; 0xf2e <pow+0xa0>
     f44:	96 38       	cpi	r25, 0x86	; 134
     f46:	a0 f7       	brcc	.-24     	; 0xf30 <pow+0xa2>
     f48:	07 f8       	bld	r0, 7
     f4a:	0f 92       	push	r0
     f4c:	e8 94       	clt
     f4e:	2b e3       	ldi	r18, 0x3B	; 59
     f50:	3a ea       	ldi	r19, 0xAA	; 170
     f52:	48 eb       	ldi	r20, 0xB8	; 184
     f54:	5f e7       	ldi	r21, 0x7F	; 127
     f56:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3_pse>
     f5a:	0f 92       	push	r0
     f5c:	0f 92       	push	r0
     f5e:	0f 92       	push	r0
     f60:	4d b7       	in	r20, 0x3d	; 61
     f62:	5e b7       	in	r21, 0x3e	; 62
     f64:	0f 92       	push	r0
     f66:	0e 94 69 08 	call	0x10d2	; 0x10d2 <modf>
     f6a:	e4 e5       	ldi	r30, 0x54	; 84
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fp_powser>
     f72:	4f 91       	pop	r20
     f74:	5f 91       	pop	r21
     f76:	ef 91       	pop	r30
     f78:	ff 91       	pop	r31
     f7a:	e5 95       	asr	r30
     f7c:	ee 1f       	adc	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	49 f0       	breq	.+18     	; 0xf94 <exp+0x56>
     f82:	fe 57       	subi	r31, 0x7E	; 126
     f84:	e0 68       	ori	r30, 0x80	; 128
     f86:	44 27       	eor	r20, r20
     f88:	ee 0f       	add	r30, r30
     f8a:	44 1f       	adc	r20, r20
     f8c:	fa 95       	dec	r31
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <exp+0x4a>
     f90:	41 95       	neg	r20
     f92:	55 0b       	sbc	r21, r21
     f94:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <ldexp>
     f98:	0f 90       	pop	r0
     f9a:	07 fe       	sbrs	r0, 7
     f9c:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <inverse>
     fa0:	08 95       	ret

00000fa2 <__fp_mpack>:
     fa2:	9f 3f       	cpi	r25, 0xFF	; 255
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <__fp_mpack_finite+0xc>

00000fa6 <__fp_mpack_finite>:
     fa6:	91 50       	subi	r25, 0x01	; 1
     fa8:	20 f4       	brcc	.+8      	; 0xfb2 <__fp_mpack_finite+0xc>
     faa:	87 95       	ror	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	b7 95       	ror	r27
     fb2:	88 0f       	add	r24, r24
     fb4:	91 1d       	adc	r25, r1
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	97 f9       	bld	r25, 7
     fbc:	08 95       	ret
     fbe:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>
     fc2:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_mpack>

00000fc6 <ldexp>:
     fc6:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_splitA>
     fca:	d8 f3       	brcs	.-10     	; 0xfc2 <__fp_mpack_finite+0x1c>
     fcc:	99 23       	and	r25, r25
     fce:	c9 f3       	breq	.-14     	; 0xfc2 <__fp_mpack_finite+0x1c>
     fd0:	94 0f       	add	r25, r20
     fd2:	51 1d       	adc	r21, r1
     fd4:	a3 f3       	brvs	.-24     	; 0xfbe <__fp_mpack_finite+0x18>
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	50 40       	sbci	r21, 0x00	; 0
     fda:	94 f0       	brlt	.+36     	; 0x1000 <ldexp+0x3a>
     fdc:	59 f0       	breq	.+22     	; 0xff4 <ldexp+0x2e>
     fde:	88 23       	and	r24, r24
     fe0:	32 f0       	brmi	.+12     	; 0xfee <ldexp+0x28>
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	91 50       	subi	r25, 0x01	; 1
     fea:	50 40       	sbci	r21, 0x00	; 0
     fec:	c1 f7       	brne	.-16     	; 0xfde <ldexp+0x18>
     fee:	9e 3f       	cpi	r25, 0xFE	; 254
     ff0:	51 05       	cpc	r21, r1
     ff2:	2c f7       	brge	.-54     	; 0xfbe <__fp_mpack_finite+0x18>
     ff4:	88 0f       	add	r24, r24
     ff6:	91 1d       	adc	r25, r1
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret
    1000:	5f 3f       	cpi	r21, 0xFF	; 255
    1002:	ac f0       	brlt	.+42     	; 0x102e <ldexp+0x68>
    1004:	98 3e       	cpi	r25, 0xE8	; 232
    1006:	9c f0       	brlt	.+38     	; 0x102e <ldexp+0x68>
    1008:	bb 27       	eor	r27, r27
    100a:	86 95       	lsr	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	08 f4       	brcc	.+2      	; 0x1016 <ldexp+0x50>
    1014:	b1 60       	ori	r27, 0x01	; 1
    1016:	93 95       	inc	r25
    1018:	c1 f7       	brne	.-16     	; 0x100a <ldexp+0x44>
    101a:	bb 0f       	add	r27, r27
    101c:	58 f7       	brcc	.-42     	; 0xff4 <ldexp+0x2e>
    101e:	11 f4       	brne	.+4      	; 0x1024 <ldexp+0x5e>
    1020:	60 ff       	sbrs	r22, 0
    1022:	e8 cf       	rjmp	.-48     	; 0xff4 <ldexp+0x2e>
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	e3 cf       	rjmp	.-58     	; 0xff4 <ldexp+0x2e>
    102e:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
    1032:	16 f0       	brts	.+4      	; 0x1038 <ldexp+0x72>
    1034:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_mpack>
    1038:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_nan>
    103c:	68 94       	set
    103e:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_inf>

00001042 <log>:
    1042:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_splitA>
    1046:	a8 f3       	brcs	.-22     	; 0x1032 <ldexp+0x6c>
    1048:	99 23       	and	r25, r25
    104a:	c1 f3       	breq	.-16     	; 0x103c <ldexp+0x76>
    104c:	ae f3       	brts	.-22     	; 0x1038 <ldexp+0x72>
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	1f 93       	push	r17
    1054:	0f 93       	push	r16
    1056:	ff 92       	push	r15
    1058:	c9 2f       	mov	r28, r25
    105a:	dd 27       	eor	r29, r29
    105c:	88 23       	and	r24, r24
    105e:	2a f0       	brmi	.+10     	; 0x106a <log+0x28>
    1060:	21 97       	sbiw	r28, 0x01	; 1
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	da f7       	brpl	.-10     	; 0x1060 <log+0x1e>
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f eb       	ldi	r21, 0xBF	; 191
    1072:	9f e3       	ldi	r25, 0x3F	; 63
    1074:	88 39       	cpi	r24, 0x98	; 152
    1076:	20 f0       	brcs	.+8      	; 0x1080 <log+0x3e>
    1078:	80 3e       	cpi	r24, 0xE0	; 224
    107a:	38 f0       	brcs	.+14     	; 0x108a <log+0x48>
    107c:	21 96       	adiw	r28, 0x01	; 1
    107e:	8f 77       	andi	r24, 0x7F	; 127
    1080:	0e 94 09 05 	call	0xa12	; 0xa12 <__addsf3>
    1084:	ec e7       	ldi	r30, 0x7C	; 124
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <log+0x50>
    108a:	0e 94 09 05 	call	0xa12	; 0xa12 <__addsf3>
    108e:	e9 ea       	ldi	r30, 0xA9	; 169
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fp_powser>
    1096:	8b 01       	movw	r16, r22
    1098:	be 01       	movw	r22, r28
    109a:	ec 01       	movw	r28, r24
    109c:	fb 2e       	mov	r15, r27
    109e:	6f 57       	subi	r22, 0x7F	; 127
    10a0:	71 09       	sbc	r23, r1
    10a2:	75 95       	asr	r23
    10a4:	77 1f       	adc	r23, r23
    10a6:	88 0b       	sbc	r24, r24
    10a8:	99 0b       	sbc	r25, r25
    10aa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
    10ae:	28 e1       	ldi	r18, 0x18	; 24
    10b0:	32 e7       	ldi	r19, 0x72	; 114
    10b2:	41 e3       	ldi	r20, 0x31	; 49
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 ed 06 	call	0xdda	; 0xdda <__mulsf3x>
    10ba:	af 2d       	mov	r26, r15
    10bc:	98 01       	movw	r18, r16
    10be:	ae 01       	movw	r20, r28
    10c0:	ff 90       	pop	r15
    10c2:	0f 91       	pop	r16
    10c4:	1f 91       	pop	r17
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3x>
    10ce:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_round>

000010d2 <modf>:
    10d2:	fa 01       	movw	r30, r20
    10d4:	dc 01       	movw	r26, r24
    10d6:	aa 0f       	add	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	bf 57       	subi	r27, 0x7F	; 127
    10e0:	28 f4       	brcc	.+10     	; 0x10ec <modf+0x1a>
    10e2:	22 27       	eor	r18, r18
    10e4:	33 27       	eor	r19, r19
    10e6:	44 27       	eor	r20, r20
    10e8:	50 78       	andi	r21, 0x80	; 128
    10ea:	20 c0       	rjmp	.+64     	; 0x112c <modf+0x5a>
    10ec:	b7 51       	subi	r27, 0x17	; 23
    10ee:	90 f4       	brcc	.+36     	; 0x1114 <modf+0x42>
    10f0:	ab 2f       	mov	r26, r27
    10f2:	00 24       	eor	r0, r0
    10f4:	46 95       	lsr	r20
    10f6:	37 95       	ror	r19
    10f8:	27 95       	ror	r18
    10fa:	01 1c       	adc	r0, r1
    10fc:	a3 95       	inc	r26
    10fe:	d2 f3       	brmi	.-12     	; 0x10f4 <modf+0x22>
    1100:	00 20       	and	r0, r0
    1102:	71 f0       	breq	.+28     	; 0x1120 <modf+0x4e>
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	44 1f       	adc	r20, r20
    110a:	b3 95       	inc	r27
    110c:	da f3       	brmi	.-10     	; 0x1104 <modf+0x32>
    110e:	0e d0       	rcall	.+28     	; 0x112c <modf+0x5a>
    1110:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__subsf3>
    1114:	61 30       	cpi	r22, 0x01	; 1
    1116:	71 05       	cpc	r23, r1
    1118:	a0 e8       	ldi	r26, 0x80	; 128
    111a:	8a 07       	cpc	r24, r26
    111c:	b9 46       	sbci	r27, 0x69	; 105
    111e:	30 f4       	brcc	.+12     	; 0x112c <modf+0x5a>
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	66 27       	eor	r22, r22
    1126:	77 27       	eor	r23, r23
    1128:	88 27       	eor	r24, r24
    112a:	90 78       	andi	r25, 0x80	; 128
    112c:	30 96       	adiw	r30, 0x00	; 0
    112e:	21 f0       	breq	.+8      	; 0x1138 <modf+0x66>
    1130:	20 83       	st	Z, r18
    1132:	31 83       	std	Z+1, r19	; 0x01
    1134:	42 83       	std	Z+2, r20	; 0x02
    1136:	53 83       	std	Z+3, r21	; 0x03
    1138:	08 95       	ret

0000113a <sprintf>:
    113a:	ae e0       	ldi	r26, 0x0E	; 14
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__prologue_saves__+0x1c>
    1146:	0d 89       	ldd	r16, Y+21	; 0x15
    1148:	1e 89       	ldd	r17, Y+22	; 0x16
    114a:	86 e0       	ldi	r24, 0x06	; 6
    114c:	8c 83       	std	Y+4, r24	; 0x04
    114e:	1a 83       	std	Y+2, r17	; 0x02
    1150:	09 83       	std	Y+1, r16	; 0x01
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	9f e7       	ldi	r25, 0x7F	; 127
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	ae 01       	movw	r20, r28
    115c:	47 5e       	subi	r20, 0xE7	; 231
    115e:	5f 4f       	sbci	r21, 0xFF	; 255
    1160:	6f 89       	ldd	r22, Y+23	; 0x17
    1162:	78 8d       	ldd	r23, Y+24	; 0x18
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	0e 94 c0 08 	call	0x1180	; 0x1180 <vfprintf>
    116c:	2f 81       	ldd	r18, Y+7	; 0x07
    116e:	38 85       	ldd	r19, Y+8	; 0x08
    1170:	f8 01       	movw	r30, r16
    1172:	e2 0f       	add	r30, r18
    1174:	f3 1f       	adc	r31, r19
    1176:	10 82       	st	Z, r1
    1178:	2e 96       	adiw	r28, 0x0e	; 14
    117a:	e4 e0       	ldi	r30, 0x04	; 4
    117c:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__epilogue_restores__+0x1c>

00001180 <vfprintf>:
    1180:	ac e0       	ldi	r26, 0x0C	; 12
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 ec       	ldi	r30, 0xC6	; 198
    1186:	f8 e0       	ldi	r31, 0x08	; 8
    1188:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__prologue_saves__>
    118c:	7c 01       	movw	r14, r24
    118e:	6b 01       	movw	r12, r22
    1190:	8a 01       	movw	r16, r20
    1192:	fc 01       	movw	r30, r24
    1194:	17 82       	std	Z+7, r1	; 0x07
    1196:	16 82       	std	Z+6, r1	; 0x06
    1198:	83 81       	ldd	r24, Z+3	; 0x03
    119a:	81 ff       	sbrs	r24, 1
    119c:	bd c1       	rjmp	.+890    	; 0x1518 <vfprintf+0x398>
    119e:	ce 01       	movw	r24, r28
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	4c 01       	movw	r8, r24
    11a4:	f7 01       	movw	r30, r14
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	f6 01       	movw	r30, r12
    11aa:	93 fd       	sbrc	r25, 3
    11ac:	85 91       	lpm	r24, Z+
    11ae:	93 ff       	sbrs	r25, 3
    11b0:	81 91       	ld	r24, Z+
    11b2:	6f 01       	movw	r12, r30
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <vfprintf+0x3a>
    11b8:	ab c1       	rjmp	.+854    	; 0x1510 <vfprintf+0x390>
    11ba:	85 32       	cpi	r24, 0x25	; 37
    11bc:	39 f4       	brne	.+14     	; 0x11cc <vfprintf+0x4c>
    11be:	93 fd       	sbrc	r25, 3
    11c0:	85 91       	lpm	r24, Z+
    11c2:	93 ff       	sbrs	r25, 3
    11c4:	81 91       	ld	r24, Z+
    11c6:	6f 01       	movw	r12, r30
    11c8:	85 32       	cpi	r24, 0x25	; 37
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <vfprintf+0x56>
    11cc:	b7 01       	movw	r22, r14
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    11d4:	e7 cf       	rjmp	.-50     	; 0x11a4 <vfprintf+0x24>
    11d6:	51 2c       	mov	r5, r1
    11d8:	31 2c       	mov	r3, r1
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	20 32       	cpi	r18, 0x20	; 32
    11de:	a0 f4       	brcc	.+40     	; 0x1208 <vfprintf+0x88>
    11e0:	8b 32       	cpi	r24, 0x2B	; 43
    11e2:	69 f0       	breq	.+26     	; 0x11fe <vfprintf+0x7e>
    11e4:	30 f4       	brcc	.+12     	; 0x11f2 <vfprintf+0x72>
    11e6:	80 32       	cpi	r24, 0x20	; 32
    11e8:	59 f0       	breq	.+22     	; 0x1200 <vfprintf+0x80>
    11ea:	83 32       	cpi	r24, 0x23	; 35
    11ec:	69 f4       	brne	.+26     	; 0x1208 <vfprintf+0x88>
    11ee:	20 61       	ori	r18, 0x10	; 16
    11f0:	2c c0       	rjmp	.+88     	; 0x124a <vfprintf+0xca>
    11f2:	8d 32       	cpi	r24, 0x2D	; 45
    11f4:	39 f0       	breq	.+14     	; 0x1204 <vfprintf+0x84>
    11f6:	80 33       	cpi	r24, 0x30	; 48
    11f8:	39 f4       	brne	.+14     	; 0x1208 <vfprintf+0x88>
    11fa:	21 60       	ori	r18, 0x01	; 1
    11fc:	26 c0       	rjmp	.+76     	; 0x124a <vfprintf+0xca>
    11fe:	22 60       	ori	r18, 0x02	; 2
    1200:	24 60       	ori	r18, 0x04	; 4
    1202:	23 c0       	rjmp	.+70     	; 0x124a <vfprintf+0xca>
    1204:	28 60       	ori	r18, 0x08	; 8
    1206:	21 c0       	rjmp	.+66     	; 0x124a <vfprintf+0xca>
    1208:	27 fd       	sbrc	r18, 7
    120a:	27 c0       	rjmp	.+78     	; 0x125a <vfprintf+0xda>
    120c:	30 ed       	ldi	r19, 0xD0	; 208
    120e:	38 0f       	add	r19, r24
    1210:	3a 30       	cpi	r19, 0x0A	; 10
    1212:	78 f4       	brcc	.+30     	; 0x1232 <vfprintf+0xb2>
    1214:	26 ff       	sbrs	r18, 6
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0xa4>
    1218:	fa e0       	ldi	r31, 0x0A	; 10
    121a:	5f 9e       	mul	r5, r31
    121c:	30 0d       	add	r19, r0
    121e:	11 24       	eor	r1, r1
    1220:	53 2e       	mov	r5, r19
    1222:	13 c0       	rjmp	.+38     	; 0x124a <vfprintf+0xca>
    1224:	8a e0       	ldi	r24, 0x0A	; 10
    1226:	38 9e       	mul	r3, r24
    1228:	30 0d       	add	r19, r0
    122a:	11 24       	eor	r1, r1
    122c:	33 2e       	mov	r3, r19
    122e:	20 62       	ori	r18, 0x20	; 32
    1230:	0c c0       	rjmp	.+24     	; 0x124a <vfprintf+0xca>
    1232:	8e 32       	cpi	r24, 0x2E	; 46
    1234:	21 f4       	brne	.+8      	; 0x123e <vfprintf+0xbe>
    1236:	26 fd       	sbrc	r18, 6
    1238:	6b c1       	rjmp	.+726    	; 0x1510 <vfprintf+0x390>
    123a:	20 64       	ori	r18, 0x40	; 64
    123c:	06 c0       	rjmp	.+12     	; 0x124a <vfprintf+0xca>
    123e:	8c 36       	cpi	r24, 0x6C	; 108
    1240:	11 f4       	brne	.+4      	; 0x1246 <vfprintf+0xc6>
    1242:	20 68       	ori	r18, 0x80	; 128
    1244:	02 c0       	rjmp	.+4      	; 0x124a <vfprintf+0xca>
    1246:	88 36       	cpi	r24, 0x68	; 104
    1248:	41 f4       	brne	.+16     	; 0x125a <vfprintf+0xda>
    124a:	f6 01       	movw	r30, r12
    124c:	93 fd       	sbrc	r25, 3
    124e:	85 91       	lpm	r24, Z+
    1250:	93 ff       	sbrs	r25, 3
    1252:	81 91       	ld	r24, Z+
    1254:	6f 01       	movw	r12, r30
    1256:	81 11       	cpse	r24, r1
    1258:	c1 cf       	rjmp	.-126    	; 0x11dc <vfprintf+0x5c>
    125a:	98 2f       	mov	r25, r24
    125c:	9f 7d       	andi	r25, 0xDF	; 223
    125e:	95 54       	subi	r25, 0x45	; 69
    1260:	93 30       	cpi	r25, 0x03	; 3
    1262:	28 f4       	brcc	.+10     	; 0x126e <vfprintf+0xee>
    1264:	0c 5f       	subi	r16, 0xFC	; 252
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	ff e3       	ldi	r31, 0x3F	; 63
    126a:	f9 83       	std	Y+1, r31	; 0x01
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <vfprintf+0x108>
    126e:	83 36       	cpi	r24, 0x63	; 99
    1270:	31 f0       	breq	.+12     	; 0x127e <vfprintf+0xfe>
    1272:	83 37       	cpi	r24, 0x73	; 115
    1274:	71 f0       	breq	.+28     	; 0x1292 <vfprintf+0x112>
    1276:	83 35       	cpi	r24, 0x53	; 83
    1278:	09 f0       	breq	.+2      	; 0x127c <vfprintf+0xfc>
    127a:	5b c0       	rjmp	.+182    	; 0x1332 <vfprintf+0x1b2>
    127c:	22 c0       	rjmp	.+68     	; 0x12c2 <vfprintf+0x142>
    127e:	f8 01       	movw	r30, r16
    1280:	80 81       	ld	r24, Z
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	0e 5f       	subi	r16, 0xFE	; 254
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	44 24       	eor	r4, r4
    128a:	43 94       	inc	r4
    128c:	51 2c       	mov	r5, r1
    128e:	54 01       	movw	r10, r8
    1290:	15 c0       	rjmp	.+42     	; 0x12bc <vfprintf+0x13c>
    1292:	38 01       	movw	r6, r16
    1294:	f2 e0       	ldi	r31, 0x02	; 2
    1296:	6f 0e       	add	r6, r31
    1298:	71 1c       	adc	r7, r1
    129a:	f8 01       	movw	r30, r16
    129c:	a0 80       	ld	r10, Z
    129e:	b1 80       	ldd	r11, Z+1	; 0x01
    12a0:	26 ff       	sbrs	r18, 6
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <vfprintf+0x12a>
    12a4:	65 2d       	mov	r22, r5
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x12e>
    12aa:	6f ef       	ldi	r22, 0xFF	; 255
    12ac:	7f ef       	ldi	r23, 0xFF	; 255
    12ae:	c5 01       	movw	r24, r10
    12b0:	2c 87       	std	Y+12, r18	; 0x0c
    12b2:	0e 94 9d 0a 	call	0x153a	; 0x153a <strnlen>
    12b6:	2c 01       	movw	r4, r24
    12b8:	83 01       	movw	r16, r6
    12ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    12bc:	2f 77       	andi	r18, 0x7F	; 127
    12be:	22 2e       	mov	r2, r18
    12c0:	17 c0       	rjmp	.+46     	; 0x12f0 <vfprintf+0x170>
    12c2:	38 01       	movw	r6, r16
    12c4:	f2 e0       	ldi	r31, 0x02	; 2
    12c6:	6f 0e       	add	r6, r31
    12c8:	71 1c       	adc	r7, r1
    12ca:	f8 01       	movw	r30, r16
    12cc:	a0 80       	ld	r10, Z
    12ce:	b1 80       	ldd	r11, Z+1	; 0x01
    12d0:	26 ff       	sbrs	r18, 6
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <vfprintf+0x15a>
    12d4:	65 2d       	mov	r22, r5
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x15e>
    12da:	6f ef       	ldi	r22, 0xFF	; 255
    12dc:	7f ef       	ldi	r23, 0xFF	; 255
    12de:	c5 01       	movw	r24, r10
    12e0:	2c 87       	std	Y+12, r18	; 0x0c
    12e2:	0e 94 92 0a 	call	0x1524	; 0x1524 <strnlen_P>
    12e6:	2c 01       	movw	r4, r24
    12e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ea:	20 68       	ori	r18, 0x80	; 128
    12ec:	22 2e       	mov	r2, r18
    12ee:	83 01       	movw	r16, r6
    12f0:	23 fc       	sbrc	r2, 3
    12f2:	1b c0       	rjmp	.+54     	; 0x132a <vfprintf+0x1aa>
    12f4:	83 2d       	mov	r24, r3
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	48 16       	cp	r4, r24
    12fa:	59 06       	cpc	r5, r25
    12fc:	b0 f4       	brcc	.+44     	; 0x132a <vfprintf+0x1aa>
    12fe:	b7 01       	movw	r22, r14
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    1308:	3a 94       	dec	r3
    130a:	f4 cf       	rjmp	.-24     	; 0x12f4 <vfprintf+0x174>
    130c:	f5 01       	movw	r30, r10
    130e:	27 fc       	sbrc	r2, 7
    1310:	85 91       	lpm	r24, Z+
    1312:	27 fe       	sbrs	r2, 7
    1314:	81 91       	ld	r24, Z+
    1316:	5f 01       	movw	r10, r30
    1318:	b7 01       	movw	r22, r14
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    1320:	31 10       	cpse	r3, r1
    1322:	3a 94       	dec	r3
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	4f 1a       	sub	r4, r31
    1328:	51 08       	sbc	r5, r1
    132a:	41 14       	cp	r4, r1
    132c:	51 04       	cpc	r5, r1
    132e:	71 f7       	brne	.-36     	; 0x130c <vfprintf+0x18c>
    1330:	e5 c0       	rjmp	.+458    	; 0x14fc <vfprintf+0x37c>
    1332:	84 36       	cpi	r24, 0x64	; 100
    1334:	11 f0       	breq	.+4      	; 0x133a <vfprintf+0x1ba>
    1336:	89 36       	cpi	r24, 0x69	; 105
    1338:	39 f5       	brne	.+78     	; 0x1388 <vfprintf+0x208>
    133a:	f8 01       	movw	r30, r16
    133c:	27 ff       	sbrs	r18, 7
    133e:	07 c0       	rjmp	.+14     	; 0x134e <vfprintf+0x1ce>
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	0c 5f       	subi	r16, 0xFC	; 252
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	08 c0       	rjmp	.+16     	; 0x135e <vfprintf+0x1de>
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	07 2e       	mov	r0, r23
    1354:	00 0c       	add	r0, r0
    1356:	88 0b       	sbc	r24, r24
    1358:	99 0b       	sbc	r25, r25
    135a:	0e 5f       	subi	r16, 0xFE	; 254
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	2f 76       	andi	r18, 0x6F	; 111
    1360:	72 2e       	mov	r7, r18
    1362:	97 ff       	sbrs	r25, 7
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <vfprintf+0x1f8>
    1366:	90 95       	com	r25
    1368:	80 95       	com	r24
    136a:	70 95       	com	r23
    136c:	61 95       	neg	r22
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	20 68       	ori	r18, 0x80	; 128
    1376:	72 2e       	mov	r7, r18
    1378:	2a e0       	ldi	r18, 0x0A	; 10
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	a4 01       	movw	r20, r8
    137e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__ultoa_invert>
    1382:	a8 2e       	mov	r10, r24
    1384:	a8 18       	sub	r10, r8
    1386:	44 c0       	rjmp	.+136    	; 0x1410 <vfprintf+0x290>
    1388:	85 37       	cpi	r24, 0x75	; 117
    138a:	29 f4       	brne	.+10     	; 0x1396 <vfprintf+0x216>
    138c:	2f 7e       	andi	r18, 0xEF	; 239
    138e:	b2 2e       	mov	r11, r18
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	25 c0       	rjmp	.+74     	; 0x13e0 <vfprintf+0x260>
    1396:	f2 2f       	mov	r31, r18
    1398:	f9 7f       	andi	r31, 0xF9	; 249
    139a:	bf 2e       	mov	r11, r31
    139c:	8f 36       	cpi	r24, 0x6F	; 111
    139e:	c1 f0       	breq	.+48     	; 0x13d0 <vfprintf+0x250>
    13a0:	18 f4       	brcc	.+6      	; 0x13a8 <vfprintf+0x228>
    13a2:	88 35       	cpi	r24, 0x58	; 88
    13a4:	79 f0       	breq	.+30     	; 0x13c4 <vfprintf+0x244>
    13a6:	b4 c0       	rjmp	.+360    	; 0x1510 <vfprintf+0x390>
    13a8:	80 37       	cpi	r24, 0x70	; 112
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <vfprintf+0x232>
    13ac:	88 37       	cpi	r24, 0x78	; 120
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <vfprintf+0x238>
    13b0:	af c0       	rjmp	.+350    	; 0x1510 <vfprintf+0x390>
    13b2:	2f 2f       	mov	r18, r31
    13b4:	20 61       	ori	r18, 0x10	; 16
    13b6:	b2 2e       	mov	r11, r18
    13b8:	b4 fe       	sbrs	r11, 4
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <vfprintf+0x256>
    13bc:	8b 2d       	mov	r24, r11
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	b8 2e       	mov	r11, r24
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <vfprintf+0x256>
    13c4:	24 ff       	sbrs	r18, 4
    13c6:	0a c0       	rjmp	.+20     	; 0x13dc <vfprintf+0x25c>
    13c8:	9f 2f       	mov	r25, r31
    13ca:	96 60       	ori	r25, 0x06	; 6
    13cc:	b9 2e       	mov	r11, r25
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x25c>
    13d0:	28 e0       	ldi	r18, 0x08	; 8
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <vfprintf+0x260>
    13d6:	20 e1       	ldi	r18, 0x10	; 16
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <vfprintf+0x260>
    13dc:	20 e1       	ldi	r18, 0x10	; 16
    13de:	32 e0       	ldi	r19, 0x02	; 2
    13e0:	f8 01       	movw	r30, r16
    13e2:	b7 fe       	sbrs	r11, 7
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <vfprintf+0x274>
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	0c 5f       	subi	r16, 0xFC	; 252
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0x280>
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 5f       	subi	r16, 0xFE	; 254
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	a4 01       	movw	r20, r8
    1402:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__ultoa_invert>
    1406:	a8 2e       	mov	r10, r24
    1408:	a8 18       	sub	r10, r8
    140a:	fb 2d       	mov	r31, r11
    140c:	ff 77       	andi	r31, 0x7F	; 127
    140e:	7f 2e       	mov	r7, r31
    1410:	76 fe       	sbrs	r7, 6
    1412:	0b c0       	rjmp	.+22     	; 0x142a <vfprintf+0x2aa>
    1414:	37 2d       	mov	r19, r7
    1416:	3e 7f       	andi	r19, 0xFE	; 254
    1418:	a5 14       	cp	r10, r5
    141a:	50 f4       	brcc	.+20     	; 0x1430 <vfprintf+0x2b0>
    141c:	74 fe       	sbrs	r7, 4
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <vfprintf+0x2b4>
    1420:	72 fc       	sbrc	r7, 2
    1422:	08 c0       	rjmp	.+16     	; 0x1434 <vfprintf+0x2b4>
    1424:	37 2d       	mov	r19, r7
    1426:	3e 7e       	andi	r19, 0xEE	; 238
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <vfprintf+0x2b4>
    142a:	ba 2c       	mov	r11, r10
    142c:	37 2d       	mov	r19, r7
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <vfprintf+0x2b6>
    1430:	ba 2c       	mov	r11, r10
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <vfprintf+0x2b6>
    1434:	b5 2c       	mov	r11, r5
    1436:	34 ff       	sbrs	r19, 4
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <vfprintf+0x2d4>
    143a:	fe 01       	movw	r30, r28
    143c:	ea 0d       	add	r30, r10
    143e:	f1 1d       	adc	r31, r1
    1440:	80 81       	ld	r24, Z
    1442:	80 33       	cpi	r24, 0x30	; 48
    1444:	11 f4       	brne	.+4      	; 0x144a <vfprintf+0x2ca>
    1446:	39 7e       	andi	r19, 0xE9	; 233
    1448:	09 c0       	rjmp	.+18     	; 0x145c <vfprintf+0x2dc>
    144a:	32 ff       	sbrs	r19, 2
    144c:	06 c0       	rjmp	.+12     	; 0x145a <vfprintf+0x2da>
    144e:	b3 94       	inc	r11
    1450:	b3 94       	inc	r11
    1452:	04 c0       	rjmp	.+8      	; 0x145c <vfprintf+0x2dc>
    1454:	83 2f       	mov	r24, r19
    1456:	86 78       	andi	r24, 0x86	; 134
    1458:	09 f0       	breq	.+2      	; 0x145c <vfprintf+0x2dc>
    145a:	b3 94       	inc	r11
    145c:	33 fd       	sbrc	r19, 3
    145e:	13 c0       	rjmp	.+38     	; 0x1486 <vfprintf+0x306>
    1460:	30 ff       	sbrs	r19, 0
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0x2f0>
    1464:	5a 2c       	mov	r5, r10
    1466:	b3 14       	cp	r11, r3
    1468:	18 f4       	brcc	.+6      	; 0x1470 <vfprintf+0x2f0>
    146a:	53 0c       	add	r5, r3
    146c:	5b 18       	sub	r5, r11
    146e:	b3 2c       	mov	r11, r3
    1470:	b3 14       	cp	r11, r3
    1472:	68 f4       	brcc	.+26     	; 0x148e <vfprintf+0x30e>
    1474:	b7 01       	movw	r22, r14
    1476:	80 e2       	ldi	r24, 0x20	; 32
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	3c 87       	std	Y+12, r19	; 0x0c
    147c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    1480:	b3 94       	inc	r11
    1482:	3c 85       	ldd	r19, Y+12	; 0x0c
    1484:	f5 cf       	rjmp	.-22     	; 0x1470 <vfprintf+0x2f0>
    1486:	b3 14       	cp	r11, r3
    1488:	10 f4       	brcc	.+4      	; 0x148e <vfprintf+0x30e>
    148a:	3b 18       	sub	r3, r11
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <vfprintf+0x310>
    148e:	31 2c       	mov	r3, r1
    1490:	34 ff       	sbrs	r19, 4
    1492:	12 c0       	rjmp	.+36     	; 0x14b8 <vfprintf+0x338>
    1494:	b7 01       	movw	r22, r14
    1496:	80 e3       	ldi	r24, 0x30	; 48
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	3c 87       	std	Y+12, r19	; 0x0c
    149c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    14a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    14a2:	32 ff       	sbrs	r19, 2
    14a4:	17 c0       	rjmp	.+46     	; 0x14d4 <vfprintf+0x354>
    14a6:	31 fd       	sbrc	r19, 1
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <vfprintf+0x330>
    14aa:	88 e7       	ldi	r24, 0x78	; 120
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x334>
    14b0:	88 e5       	ldi	r24, 0x58	; 88
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	b7 01       	movw	r22, r14
    14b6:	0c c0       	rjmp	.+24     	; 0x14d0 <vfprintf+0x350>
    14b8:	83 2f       	mov	r24, r19
    14ba:	86 78       	andi	r24, 0x86	; 134
    14bc:	59 f0       	breq	.+22     	; 0x14d4 <vfprintf+0x354>
    14be:	31 ff       	sbrs	r19, 1
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <vfprintf+0x346>
    14c2:	8b e2       	ldi	r24, 0x2B	; 43
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <vfprintf+0x348>
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	37 fd       	sbrc	r19, 7
    14ca:	8d e2       	ldi	r24, 0x2D	; 45
    14cc:	b7 01       	movw	r22, r14
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    14d4:	a5 14       	cp	r10, r5
    14d6:	38 f4       	brcc	.+14     	; 0x14e6 <vfprintf+0x366>
    14d8:	b7 01       	movw	r22, r14
    14da:	80 e3       	ldi	r24, 0x30	; 48
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    14e2:	5a 94       	dec	r5
    14e4:	f7 cf       	rjmp	.-18     	; 0x14d4 <vfprintf+0x354>
    14e6:	aa 94       	dec	r10
    14e8:	f4 01       	movw	r30, r8
    14ea:	ea 0d       	add	r30, r10
    14ec:	f1 1d       	adc	r31, r1
    14ee:	80 81       	ld	r24, Z
    14f0:	b7 01       	movw	r22, r14
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    14f8:	a1 10       	cpse	r10, r1
    14fa:	f5 cf       	rjmp	.-22     	; 0x14e6 <vfprintf+0x366>
    14fc:	33 20       	and	r3, r3
    14fe:	09 f4       	brne	.+2      	; 0x1502 <vfprintf+0x382>
    1500:	51 ce       	rjmp	.-862    	; 0x11a4 <vfprintf+0x24>
    1502:	b7 01       	movw	r22, r14
    1504:	80 e2       	ldi	r24, 0x20	; 32
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fputc>
    150c:	3a 94       	dec	r3
    150e:	f6 cf       	rjmp	.-20     	; 0x14fc <vfprintf+0x37c>
    1510:	f7 01       	movw	r30, r14
    1512:	86 81       	ldd	r24, Z+6	; 0x06
    1514:	97 81       	ldd	r25, Z+7	; 0x07
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0x39c>
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	9f ef       	ldi	r25, 0xFF	; 255
    151c:	2c 96       	adiw	r28, 0x0c	; 12
    151e:	e2 e1       	ldi	r30, 0x12	; 18
    1520:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__epilogue_restores__>

00001524 <strnlen_P>:
    1524:	fc 01       	movw	r30, r24
    1526:	05 90       	lpm	r0, Z+
    1528:	61 50       	subi	r22, 0x01	; 1
    152a:	70 40       	sbci	r23, 0x00	; 0
    152c:	01 10       	cpse	r0, r1
    152e:	d8 f7       	brcc	.-10     	; 0x1526 <strnlen_P+0x2>
    1530:	80 95       	com	r24
    1532:	90 95       	com	r25
    1534:	8e 0f       	add	r24, r30
    1536:	9f 1f       	adc	r25, r31
    1538:	08 95       	ret

0000153a <strnlen>:
    153a:	fc 01       	movw	r30, r24
    153c:	61 50       	subi	r22, 0x01	; 1
    153e:	70 40       	sbci	r23, 0x00	; 0
    1540:	01 90       	ld	r0, Z+
    1542:	01 10       	cpse	r0, r1
    1544:	d8 f7       	brcc	.-10     	; 0x153c <strnlen+0x2>
    1546:	80 95       	com	r24
    1548:	90 95       	com	r25
    154a:	8e 0f       	add	r24, r30
    154c:	9f 1f       	adc	r25, r31
    154e:	08 95       	ret

00001550 <fputc>:
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	fb 01       	movw	r30, r22
    155a:	23 81       	ldd	r18, Z+3	; 0x03
    155c:	21 fd       	sbrc	r18, 1
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <fputc+0x16>
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	28 c0       	rjmp	.+80     	; 0x15b6 <fputc+0x66>
    1566:	22 ff       	sbrs	r18, 2
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <fputc+0x46>
    156a:	46 81       	ldd	r20, Z+6	; 0x06
    156c:	57 81       	ldd	r21, Z+7	; 0x07
    156e:	24 81       	ldd	r18, Z+4	; 0x04
    1570:	35 81       	ldd	r19, Z+5	; 0x05
    1572:	42 17       	cp	r20, r18
    1574:	53 07       	cpc	r21, r19
    1576:	44 f4       	brge	.+16     	; 0x1588 <fputc+0x38>
    1578:	a0 81       	ld	r26, Z
    157a:	b1 81       	ldd	r27, Z+1	; 0x01
    157c:	9d 01       	movw	r18, r26
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	31 83       	std	Z+1, r19	; 0x01
    1584:	20 83       	st	Z, r18
    1586:	8c 93       	st	X, r24
    1588:	26 81       	ldd	r18, Z+6	; 0x06
    158a:	37 81       	ldd	r19, Z+7	; 0x07
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	37 83       	std	Z+7, r19	; 0x07
    1592:	26 83       	std	Z+6, r18	; 0x06
    1594:	10 c0       	rjmp	.+32     	; 0x15b6 <fputc+0x66>
    1596:	eb 01       	movw	r28, r22
    1598:	09 2f       	mov	r16, r25
    159a:	18 2f       	mov	r17, r24
    159c:	00 84       	ldd	r0, Z+8	; 0x08
    159e:	f1 85       	ldd	r31, Z+9	; 0x09
    15a0:	e0 2d       	mov	r30, r0
    15a2:	09 95       	icall
    15a4:	89 2b       	or	r24, r25
    15a6:	e1 f6       	brne	.-72     	; 0x1560 <fputc+0x10>
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	9f 81       	ldd	r25, Y+7	; 0x07
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	9f 83       	std	Y+7, r25	; 0x07
    15b0:	8e 83       	std	Y+6, r24	; 0x06
    15b2:	81 2f       	mov	r24, r17
    15b4:	90 2f       	mov	r25, r16
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <__ultoa_invert>:
    15c0:	fa 01       	movw	r30, r20
    15c2:	aa 27       	eor	r26, r26
    15c4:	28 30       	cpi	r18, 0x08	; 8
    15c6:	51 f1       	breq	.+84     	; 0x161c <__ultoa_invert+0x5c>
    15c8:	20 31       	cpi	r18, 0x10	; 16
    15ca:	81 f1       	breq	.+96     	; 0x162c <__ultoa_invert+0x6c>
    15cc:	e8 94       	clt
    15ce:	6f 93       	push	r22
    15d0:	6e 7f       	andi	r22, 0xFE	; 254
    15d2:	6e 5f       	subi	r22, 0xFE	; 254
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8f 4f       	sbci	r24, 0xFF	; 255
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	af 4f       	sbci	r26, 0xFF	; 255
    15dc:	b1 e0       	ldi	r27, 0x01	; 1
    15de:	3e d0       	rcall	.+124    	; 0x165c <__ultoa_invert+0x9c>
    15e0:	b4 e0       	ldi	r27, 0x04	; 4
    15e2:	3c d0       	rcall	.+120    	; 0x165c <__ultoa_invert+0x9c>
    15e4:	67 0f       	add	r22, r23
    15e6:	78 1f       	adc	r23, r24
    15e8:	89 1f       	adc	r24, r25
    15ea:	9a 1f       	adc	r25, r26
    15ec:	a1 1d       	adc	r26, r1
    15ee:	68 0f       	add	r22, r24
    15f0:	79 1f       	adc	r23, r25
    15f2:	8a 1f       	adc	r24, r26
    15f4:	91 1d       	adc	r25, r1
    15f6:	a1 1d       	adc	r26, r1
    15f8:	6a 0f       	add	r22, r26
    15fa:	71 1d       	adc	r23, r1
    15fc:	81 1d       	adc	r24, r1
    15fe:	91 1d       	adc	r25, r1
    1600:	a1 1d       	adc	r26, r1
    1602:	20 d0       	rcall	.+64     	; 0x1644 <__ultoa_invert+0x84>
    1604:	09 f4       	brne	.+2      	; 0x1608 <__ultoa_invert+0x48>
    1606:	68 94       	set
    1608:	3f 91       	pop	r19
    160a:	2a e0       	ldi	r18, 0x0A	; 10
    160c:	26 9f       	mul	r18, r22
    160e:	11 24       	eor	r1, r1
    1610:	30 19       	sub	r19, r0
    1612:	30 5d       	subi	r19, 0xD0	; 208
    1614:	31 93       	st	Z+, r19
    1616:	de f6       	brtc	.-74     	; 0x15ce <__ultoa_invert+0xe>
    1618:	cf 01       	movw	r24, r30
    161a:	08 95       	ret
    161c:	46 2f       	mov	r20, r22
    161e:	47 70       	andi	r20, 0x07	; 7
    1620:	40 5d       	subi	r20, 0xD0	; 208
    1622:	41 93       	st	Z+, r20
    1624:	b3 e0       	ldi	r27, 0x03	; 3
    1626:	0f d0       	rcall	.+30     	; 0x1646 <__ultoa_invert+0x86>
    1628:	c9 f7       	brne	.-14     	; 0x161c <__ultoa_invert+0x5c>
    162a:	f6 cf       	rjmp	.-20     	; 0x1618 <__ultoa_invert+0x58>
    162c:	46 2f       	mov	r20, r22
    162e:	4f 70       	andi	r20, 0x0F	; 15
    1630:	40 5d       	subi	r20, 0xD0	; 208
    1632:	4a 33       	cpi	r20, 0x3A	; 58
    1634:	18 f0       	brcs	.+6      	; 0x163c <__ultoa_invert+0x7c>
    1636:	49 5d       	subi	r20, 0xD9	; 217
    1638:	31 fd       	sbrc	r19, 1
    163a:	40 52       	subi	r20, 0x20	; 32
    163c:	41 93       	st	Z+, r20
    163e:	02 d0       	rcall	.+4      	; 0x1644 <__ultoa_invert+0x84>
    1640:	a9 f7       	brne	.-22     	; 0x162c <__ultoa_invert+0x6c>
    1642:	ea cf       	rjmp	.-44     	; 0x1618 <__ultoa_invert+0x58>
    1644:	b4 e0       	ldi	r27, 0x04	; 4
    1646:	a6 95       	lsr	r26
    1648:	97 95       	ror	r25
    164a:	87 95       	ror	r24
    164c:	77 95       	ror	r23
    164e:	67 95       	ror	r22
    1650:	ba 95       	dec	r27
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__ultoa_invert+0x86>
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	61 05       	cpc	r22, r1
    1658:	71 05       	cpc	r23, r1
    165a:	08 95       	ret
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	0a 2e       	mov	r0, r26
    1662:	06 94       	lsr	r0
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	37 95       	ror	r19
    166a:	27 95       	ror	r18
    166c:	ba 95       	dec	r27
    166e:	c9 f7       	brne	.-14     	; 0x1662 <__ultoa_invert+0xa2>
    1670:	62 0f       	add	r22, r18
    1672:	73 1f       	adc	r23, r19
    1674:	84 1f       	adc	r24, r20
    1676:	95 1f       	adc	r25, r21
    1678:	a0 1d       	adc	r26, r0
    167a:	08 95       	ret

0000167c <__prologue_saves__>:
    167c:	2f 92       	push	r2
    167e:	3f 92       	push	r3
    1680:	4f 92       	push	r4
    1682:	5f 92       	push	r5
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	ca 1b       	sub	r28, r26
    16a6:	db 0b       	sbc	r29, r27
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	09 94       	ijmp

000016b4 <__epilogue_restores__>:
    16b4:	2a 88       	ldd	r2, Y+18	; 0x12
    16b6:	39 88       	ldd	r3, Y+17	; 0x11
    16b8:	48 88       	ldd	r4, Y+16	; 0x10
    16ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    16bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    16be:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16c6:	b9 84       	ldd	r11, Y+9	; 0x09
    16c8:	c8 84       	ldd	r12, Y+8	; 0x08
    16ca:	df 80       	ldd	r13, Y+7	; 0x07
    16cc:	ee 80       	ldd	r14, Y+6	; 0x06
    16ce:	fd 80       	ldd	r15, Y+5	; 0x05
    16d0:	0c 81       	ldd	r16, Y+4	; 0x04
    16d2:	1b 81       	ldd	r17, Y+3	; 0x03
    16d4:	aa 81       	ldd	r26, Y+2	; 0x02
    16d6:	b9 81       	ldd	r27, Y+1	; 0x01
    16d8:	ce 0f       	add	r28, r30
    16da:	d1 1d       	adc	r29, r1
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	ed 01       	movw	r28, r26
    16e8:	08 95       	ret

000016ea <_exit>:
    16ea:	f8 94       	cli

000016ec <__stop_program>:
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <__stop_program>
